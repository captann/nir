{
    "functions": [
        {
            "id": "func_001",
            "name": "SysTick_Handler",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 12,
                    "context": "void SysTick_Handler(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_002",
            "name": "GetMillis",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 18,
                    "context": "uint32_t GetMillis(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 74,
                    "context": "uint32_t current_time = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 109,
                    "context": "data->accelerometer.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 114,
                    "context": "data->gyroscope.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 125,
                    "context": "uint32_t current_time = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 54,
                    "context": "uint32_t GetMillis(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "uint32_t"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_003",
            "name": "DelayMs",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 23,
                    "context": "void DelayMs(uint32_t ms) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 104,
                    "context": "DelayMs(1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 55,
                    "context": "void DelayMs(uint32_t ms);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "ms",
                    "type": "uint32_t"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_004",
            "name": "SystemClock_Config",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 28,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 33,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 47,
                    "context": "void SystemClock_Config(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_005",
            "name": "GPIO_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 54,
                    "context": "void GPIO_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "GPIO_InitTypeDef GPIO_InitStruct = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 63,
                    "context": "GPIO_InitStruct.Pin = MOTOR1_PIN | MOTOR2_PIN | MOTOR3_PIN | MOTOR4_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 64,
                    "context": "GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 65,
                    "context": "GPIO_InitStruct.Pull = GPIO_NOPULL;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 67,
                    "context": "GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 68,
                    "context": "HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 71,
                    "context": "GPIO_InitStruct.Pin = I2C_SCL_PIN | I2C_SDA_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 72,
                    "context": "GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 73,
                    "context": "GPIO_InitStruct.Pull = GPIO_PULLUP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 74,
                    "context": "GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 75,
                    "context": "GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 76,
                    "context": "HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 9,
                    "context": "GPIO_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 48,
                    "context": "void GPIO_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_006",
            "name": "__HAL_RCC_GPIOA_CLK_ENABLE",
            "description": "Включаем тактирование портов",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 58,
                    "context": "__HAL_RCC_GPIOA_CLK_ENABLE();"
                }
            ],
            "comments": "Включаем тактирование портов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "портов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_007",
            "name": "I2C_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 80,
                    "context": "void I2C_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "HAL_I2C_Init(&hi2c1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 73,
                    "context": "I2C_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 49,
                    "context": "void I2C_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_008",
            "name": "Timer_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 94,
                    "context": "void Timer_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 10,
                    "context": "Timer_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 50,
                    "context": "void Timer_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_009",
            "name": "InitializeSystem",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 13,
                    "context": "static void InitializeSystem(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 36,
                    "context": "InitializeSystem();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 44,
                    "context": "static void InitializeSystem(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_010",
            "name": "ProcessMainLoop",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 14,
                    "context": "static void ProcessMainLoop(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 40,
                    "context": "ProcessMainLoop();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 71,
                    "context": "static void ProcessMainLoop(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_011",
            "name": "UpdateTelemetry",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 15,
                    "context": "static void UpdateTelemetry(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 96,
                    "context": "UpdateTelemetry();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 107,
                    "context": "static void UpdateTelemetry(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_012",
            "name": "HandleSafety",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 16,
                    "context": "static void HandleSafety(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 101,
                    "context": "HandleSafety();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 111,
                    "context": "static void HandleSafety(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_013",
            "name": "модулей",
            "description": "Внешние функции из других модулей (будут реализованы позже)",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [],
            "comments": "Внешние функции из других модулей (будут реализованы позже)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "позже",
                    "type": "будут реализованы"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "других"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_014",
            "name": "InitializeSensors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 19,
                    "context": "extern void InitializeSensors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 46,
                    "context": "InitializeSensors();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 71,
                    "context": "void InitializeSensors(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_015",
            "name": "ReadSensors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 20,
                    "context": "extern void ReadSensors(SensorData* data);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 77,
                    "context": "ReadSensors(&telemetry.sensors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 86,
                    "context": "void ReadSensors(SensorData* data) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "data",
                    "type": "SensorData*"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_016",
            "name": "InitializeMotors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 21,
                    "context": "extern void InitializeMotors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 47,
                    "context": "InitializeMotors();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 7,
                    "context": "void InitializeMotors(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_017",
            "name": "UpdateMotors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 22,
                    "context": "extern void UpdateMotors(const MotorControl* control);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 82,
                    "context": "UpdateMotors(&telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 91,
                    "context": "UpdateMotors(&motors_off);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 20,
                    "context": "UpdateMotors(&initial);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 23,
                    "context": "void UpdateMotors(const MotorControl* control) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "control",
                    "type": "const MotorControl*"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_018",
            "name": "InitializeStabilization",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 23,
                    "context": "extern void InitializeStabilization(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 48,
                    "context": "InitializeStabilization();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 15,
                    "context": "void InitializeStabilization(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_019",
            "name": "UpdateStabilization",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "UpdateStabilization(&last_command, &telemetry.sensors, &telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 41,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "cmd",
                    "type": "const ControlCommand*"
                },
                {
                    "name": "sensors",
                    "type": "const SensorData*"
                },
                {
                    "name": "output",
                    "type": "MotorControl*"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_020",
            "name": "InitializeCommunication",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 25,
                    "context": "extern void InitializeCommunication(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_021",
            "name": "ProcessCommunication",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 26,
                    "context": "extern bool ProcessCommunication(ControlCommand* cmd);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "cmd",
                    "type": "ControlCommand*"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "bool"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_022",
            "name": "main",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 28,
                    "context": "int main(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "int"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_023",
            "name": "HAL_Init",
            "description": "Инициализация HAL",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 30,
                    "context": "HAL_Init();"
                }
            ],
            "comments": "Инициализация HAL",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "HAL"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_024",
            "name": "SystemClock_Config",
            "description": "Настройка системного тактирования",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 28,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 33,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 47,
                    "context": "void SystemClock_Config(void);"
                }
            ],
            "comments": "Настройка системного тактирования",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "тактирования"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_026",
            "name": "while",
            "description": "Основной цикл",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 39,
                    "context": "while(1) {"
                }
            ],
            "comments": "Основной цикл",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "цикл"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_031",
            "name": "if",
            "description": "Обновление стабилизации и моторов",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 80,
                    "context": "if (current_state == DRONE_STATE_FLYING) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 95,
                    "context": "if (current_time - last_telemetry_update >= TELEMETRY_UPDATE_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "if (value < MOTOR_MIN_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 42,
                    "context": "if (value > MOTOR_MAX_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 42,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 58,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 64,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "if (MPU6050_Init() != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "if (MPU6050_Read(MPU6050_REG_ACCEL_XOUT_H, raw_data, 14) != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 128,
                    "context": "if (last_update == 0) dt = 0.01f; // Первый запуск"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 78,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 81,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 1,
                    "context": "#ifndef CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 85,
                    "context": "#endif // CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 1,
                    "context": "#ifndef HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 57,
                    "context": "#endif // HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 1,
                    "context": "#ifndef STRUCTURES_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 118,
                    "context": "#endif // STRUCTURES_H"
                }
            ],
            "comments": "Обновление стабилизации и моторов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "DRONE_STATE_FLYING",
                    "type": "current_state =="
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "моторов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_034",
            "name": "DelayMs",
            "description": "Задержка для стабильной частоты цикла",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 23,
                    "context": "void DelayMs(uint32_t ms) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 104,
                    "context": "DelayMs(1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 55,
                    "context": "void DelayMs(uint32_t ms);"
                }
            ],
            "comments": "Задержка для стабильной частоты цикла",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "цикла"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_038",
            "name": "constrain_motor_value",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 5,
                    "context": "static uint16_t constrain_motor_value(uint16_t value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 25,
                    "context": "uint16_t m1 = constrain_motor_value(control->front_left);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 26,
                    "context": "uint16_t m2 = constrain_motor_value(control->front_right);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 27,
                    "context": "uint16_t m3 = constrain_motor_value(control->rear_left);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 28,
                    "context": "uint16_t m4 = constrain_motor_value(control->rear_right);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 38,
                    "context": "static uint16_t constrain_motor_value(uint16_t value) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "value",
                    "type": "uint16_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "uint16_t"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_039",
            "name": "InitializeMotors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 21,
                    "context": "extern void InitializeMotors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 47,
                    "context": "InitializeMotors();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 7,
                    "context": "void InitializeMotors(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_040",
            "name": "GPIO_Init",
            "description": "Инициализация GPIO и таймера",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 54,
                    "context": "void GPIO_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "GPIO_InitTypeDef GPIO_InitStruct = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 63,
                    "context": "GPIO_InitStruct.Pin = MOTOR1_PIN | MOTOR2_PIN | MOTOR3_PIN | MOTOR4_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 64,
                    "context": "GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 65,
                    "context": "GPIO_InitStruct.Pull = GPIO_NOPULL;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 67,
                    "context": "GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 68,
                    "context": "HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 71,
                    "context": "GPIO_InitStruct.Pin = I2C_SCL_PIN | I2C_SDA_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 72,
                    "context": "GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 73,
                    "context": "GPIO_InitStruct.Pull = GPIO_PULLUP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 74,
                    "context": "GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 75,
                    "context": "GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 76,
                    "context": "HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 9,
                    "context": "GPIO_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 48,
                    "context": "void GPIO_Init(void);"
                }
            ],
            "comments": "Инициализация GPIO и таймера",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "таймера"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_041",
            "name": "UpdateMotors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 22,
                    "context": "extern void UpdateMotors(const MotorControl* control);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 82,
                    "context": "UpdateMotors(&telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 91,
                    "context": "UpdateMotors(&motors_off);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 20,
                    "context": "UpdateMotors(&initial);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 23,
                    "context": "void UpdateMotors(const MotorControl* control) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "control",
                    "type": "const MotorControl*"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_042",
            "name": "__HAL_TIM_SET_COMPARE",
            "description": "Установка значений PWM",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 31,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, m1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 32,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, m2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 33,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, m3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 34,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, m4);"
                }
            ],
            "comments": "Установка значений PWM",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "PWM"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_044",
            "name": "complementary_filter",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 11,
                    "context": "static float complementary_filter(float angle, float gyro_rate, float accel_angle, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 130,
                    "context": "filtered_roll = complementary_filter(filtered_roll,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 135,
                    "context": "filtered_pitch = complementary_filter(filtered_pitch,"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "angle",
                    "type": "float"
                },
                {
                    "name": "gyro_rate",
                    "type": "float"
                },
                {
                    "name": "accel_angle",
                    "type": "float"
                },
                {
                    "name": "dt",
                    "type": "float"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "float"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_045",
            "name": "calculate_accel_angles",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 17,
                    "context": "static void calculate_accel_angles(const SensorData* data, float* roll, float* pitch) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 118,
                    "context": "calculate_accel_angles(data, &accel_roll, &accel_pitch);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "data",
                    "type": "const SensorData*"
                },
                {
                    "name": "roll",
                    "type": "float*"
                },
                {
                    "name": "pitch",
                    "type": "float*"
                }
            ],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_046",
            "name": "MPU6050_Write",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 26,
                    "context": "static HAL_StatusTypeDef MPU6050_Write(uint8_t reg, uint8_t data) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 47,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 57,
                    "context": "status = MPU6050_Write(MPU6050_REG_GYRO_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "status = MPU6050_Write(MPU6050_REG_ACCEL_CONFIG, 0x00);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "reg",
                    "type": "uint8_t"
                },
                {
                    "name": "data",
                    "type": "uint8_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "HAL_StatusTypeDef"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_047",
            "name": "HAL_I2C_Master_Transmit",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 28,
                    "context": "return HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, buf, 2, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 32,
                    "context": "HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, &reg, 1, HAL_MAX_DELAY);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "1",
                    "type": "MPU6050_ADDR <<"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "return"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_048",
            "name": "MPU6050_Read",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 31,
                    "context": "static HAL_StatusTypeDef MPU6050_Read(uint8_t reg, uint8_t *data, uint16_t size) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 41,
                    "context": "status = MPU6050_Read(MPU6050_REG_PWR_MGMT_1, &check, 1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "if (MPU6050_Read(MPU6050_REG_ACCEL_XOUT_H, raw_data, 14) != HAL_OK) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "reg",
                    "type": "uint8_t"
                },
                {
                    "name": "data",
                    "type": "uint8_t"
                },
                {
                    "name": "size",
                    "type": "uint16_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "HAL_StatusTypeDef"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_049",
            "name": "HAL_I2C_Master_Receive",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "1",
                    "type": "(MPU6050_ADDR <<"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "return"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_050",
            "name": "MPU6050_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 36,
                    "context": "static HAL_StatusTypeDef MPU6050_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "if (MPU6050_Init() != HAL_OK) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "HAL_StatusTypeDef"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_051",
            "name": "InitializeSensors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 19,
                    "context": "extern void InitializeSensors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 46,
                    "context": "InitializeSensors();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 71,
                    "context": "void InitializeSensors(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_052",
            "name": "I2C_Init",
            "description": "Инициализация I2C",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 80,
                    "context": "void I2C_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "HAL_I2C_Init(&hi2c1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 73,
                    "context": "I2C_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 49,
                    "context": "void I2C_Init(void);"
                }
            ],
            "comments": "Инициализация I2C",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "I2C"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_053",
            "name": "if",
            "description": "Инициализация MPU6050",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 80,
                    "context": "if (current_state == DRONE_STATE_FLYING) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 95,
                    "context": "if (current_time - last_telemetry_update >= TELEMETRY_UPDATE_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "if (value < MOTOR_MIN_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 42,
                    "context": "if (value > MOTOR_MAX_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 42,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 58,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 64,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "if (MPU6050_Init() != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "if (MPU6050_Read(MPU6050_REG_ACCEL_XOUT_H, raw_data, 14) != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 128,
                    "context": "if (last_update == 0) dt = 0.01f; // Первый запуск"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 78,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 81,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 1,
                    "context": "#ifndef CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 85,
                    "context": "#endif // CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 1,
                    "context": "#ifndef HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 57,
                    "context": "#endif // HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 1,
                    "context": "#ifndef STRUCTURES_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 118,
                    "context": "#endif // STRUCTURES_H"
                }
            ],
            "comments": "Инициализация MPU6050",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "MPU6050"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_054",
            "name": "ReadSensors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 20,
                    "context": "extern void ReadSensors(SensorData* data);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 77,
                    "context": "ReadSensors(&telemetry.sensors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 86,
                    "context": "void ReadSensors(SensorData* data) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "data",
                    "type": "SensorData*"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_056",
            "name": "update_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "pid",
                    "type": "PIDController*"
                },
                {
                    "name": "current_value",
                    "type": "float"
                },
                {
                    "name": "dt",
                    "type": "float"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "float"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_057",
            "name": "mix_outputs",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "throttle",
                    "type": "float"
                },
                {
                    "name": "roll",
                    "type": "float"
                },
                {
                    "name": "pitch",
                    "type": "float"
                },
                {
                    "name": "yaw",
                    "type": "float"
                },
                {
                    "name": "output",
                    "type": "MotorControl*"
                }
            ],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_058",
            "name": "InitializeStabilization",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 23,
                    "context": "extern void InitializeStabilization(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 48,
                    "context": "InitializeStabilization();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 15,
                    "context": "void InitializeStabilization(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_059",
            "name": "UpdateStabilization",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "UpdateStabilization(&last_command, &telemetry.sensors, &telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 41,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "cmd",
                    "type": "const ControlCommand*"
                },
                {
                    "name": "sensors",
                    "type": "const SensorData*"
                },
                {
                    "name": "output",
                    "type": "MotorControl*"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_060",
            "name": "высоты",
            "description": "Базовая тяга для удержания высоты (можно настроить экспериментально)",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [],
            "comments": "Базовая тяга для удержания высоты (можно настроить экспериментально)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "экспериментально",
                    "type": "можно настроить"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "удержания"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_063",
            "name": "if",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 80,
                    "context": "if (current_state == DRONE_STATE_FLYING) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 95,
                    "context": "if (current_time - last_telemetry_update >= TELEMETRY_UPDATE_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "if (value < MOTOR_MIN_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 42,
                    "context": "if (value > MOTOR_MAX_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 42,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 58,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 64,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "if (MPU6050_Init() != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "if (MPU6050_Read(MPU6050_REG_ACCEL_XOUT_H, raw_data, 14) != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 128,
                    "context": "if (last_update == 0) dt = 0.01f; // Первый запуск"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 78,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 81,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 1,
                    "context": "#ifndef CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 85,
                    "context": "#endif // CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 1,
                    "context": "#ifndef HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 57,
                    "context": "#endif // HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 1,
                    "context": "#ifndef STRUCTURES_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 118,
                    "context": "#endif // STRUCTURES_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "-max_i",
                    "type": "i_term <"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "else"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_066",
            "name": "задач",
            "description": "Периоды для различных задач (в миллисекундах)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Периоды для различных задач (в миллисекундах)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "миллисекундах",
                    "type": "в"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "различных"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_067",
            "name": "телеметрии",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 84,
                    "context": "* Структура для телеметрии"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "Гц",
                    "type": "10"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "обновления"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_068",
            "name": "датчиков",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 79,
                    "context": "* Калибровочные константы для датчиков"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 21,
                    "context": "* Структура для хранения данных с датчиков"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "Гц",
                    "type": "100"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "опроса"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_069",
            "name": "управления",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 30,
                    "context": "* Регистры системного управления"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 74,
                    "context": "* Структура для управления моторами"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 96,
                    "context": "* Структура для команд управления"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "Гц",
                    "type": "200"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "цикла"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_070",
            "name": "SYSCTL_RCC2_R",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 32,
                    "context": "#define SYSCTL_RCC2_R     (*((volatile uint32_t *)0x400FE070))  // Регистр управления тактированием"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "",
                    "type": "*((volatile uint32_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "define"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_071",
            "name": "SYSCTL_RIS_R",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 33,
                    "context": "#define SYSCTL_RIS_R      (*((volatile uint32_t *)0x400FE050))  // Регистр статуса прерываний"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "",
                    "type": "*((volatile uint32_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "define"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_072",
            "name": "SYSCTL_RCGC2_R",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 34,
                    "context": "#define SYSCTL_RCGC2_R    (*((volatile uint32_t *)0x400FE108))  // Регистр тактирования периферии"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "",
                    "type": "*((volatile uint32_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "define"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_073",
            "name": "крена",
            "description": "Коэффициенты для канала крена (Roll)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Коэффициенты для канала крена (Roll)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "канала"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_074",
            "name": "тангажа",
            "description": "Коэффициенты для канала тангажа (Pitch)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Коэффициенты для канала тангажа (Pitch)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "канала"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_075",
            "name": "рыскания",
            "description": "Коэффициенты для канала рыскания (Yaw)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Коэффициенты для канала рыскания (Yaw)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "канала"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_076",
            "name": "наклона",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "угол"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_077",
            "name": "батареи",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "напряжение"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_078",
            "name": "высота",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "разрешенная"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_079",
            "name": "контроллера",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "температура"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_080",
            "name": "моторов",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 63,
                    "context": "* Константы для моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "для"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_081",
            "name": "импульса",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "длительность"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_083",
            "name": "UART",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 6,
                    "context": "UART_HandleTypeDef huart2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 73,
                    "context": "#define UART_BAUD_RATE       115200   // Скорость UART (бод)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 44,
                    "context": "extern UART_HandleTypeDef huart2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 51,
                    "context": "void UART_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "Скорость"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_084",
            "name": "акселерометра",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "масштабирования"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_085",
            "name": "гироскопа",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "масштабирования"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_086",
            "name": "магнетометра",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "масштабирования"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_087",
            "name": "период",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "20ms"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_088",
            "name": "моторов",
            "description": "Пины для моторов (PWM выходы)",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 63,
                    "context": "* Константы для моторов"
                }
            ],
            "comments": "Пины для моторов (PWM выходы)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "выходы",
                    "type": "PWM"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "для"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_089",
            "name": "SystemClock_Config",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 28,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 33,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 47,
                    "context": "void SystemClock_Config(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_090",
            "name": "GPIO_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 54,
                    "context": "void GPIO_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "GPIO_InitTypeDef GPIO_InitStruct = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 63,
                    "context": "GPIO_InitStruct.Pin = MOTOR1_PIN | MOTOR2_PIN | MOTOR3_PIN | MOTOR4_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 64,
                    "context": "GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 65,
                    "context": "GPIO_InitStruct.Pull = GPIO_NOPULL;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 67,
                    "context": "GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 68,
                    "context": "HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 71,
                    "context": "GPIO_InitStruct.Pin = I2C_SCL_PIN | I2C_SDA_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 72,
                    "context": "GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 73,
                    "context": "GPIO_InitStruct.Pull = GPIO_PULLUP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 74,
                    "context": "GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 75,
                    "context": "GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 76,
                    "context": "HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 9,
                    "context": "GPIO_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 48,
                    "context": "void GPIO_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_091",
            "name": "I2C_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 80,
                    "context": "void I2C_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "HAL_I2C_Init(&hi2c1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 73,
                    "context": "I2C_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 49,
                    "context": "void I2C_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_092",
            "name": "Timer_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 94,
                    "context": "void Timer_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 10,
                    "context": "Timer_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 50,
                    "context": "void Timer_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_093",
            "name": "UART_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 51,
                    "context": "void UART_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_094",
            "name": "GetMillis",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 18,
                    "context": "uint32_t GetMillis(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 74,
                    "context": "uint32_t current_time = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 109,
                    "context": "data->accelerometer.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 114,
                    "context": "data->gyroscope.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 125,
                    "context": "uint32_t current_time = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 54,
                    "context": "uint32_t GetMillis(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "uint32_t"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_095",
            "name": "DelayMs",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 23,
                    "context": "void DelayMs(uint32_t ms) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 104,
                    "context": "DelayMs(1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 55,
                    "context": "void DelayMs(uint32_t ms);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "ms",
                    "type": "uint32_t"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_096",
            "name": "X",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 51,
                    "context": "config.max_angle = MAX_SAFE_ANGLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 52,
                    "context": "config.max_altitude = MAX_ALTITUDE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "telemetry.attitude.roll > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 116,
                    "context": "telemetry.attitude.pitch > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 117,
                    "context": "telemetry.attitude.altitude > MAX_ALTITUDE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 42,
                    "context": "if (value > MOTOR_MAX_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 43,
                    "context": "return MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 28,
                    "context": "return HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, buf, 2, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 32,
                    "context": "HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, &reg, 1, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "if (MPU6050_Read(MPU6050_REG_ACCEL_XOUT_H, raw_data, 14) != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "(uint16_t)((MOTOR_MAX_PULSE - MOTOR_MIN_PULSE) * throttle);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 57,
                    "context": "#define MAX_SAFE_ANGLE        45.0f   // Максимальный безопасный угол наклона (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 59,
                    "context": "#define MAX_ALTITUDE         100.0f   // Максимальная разрешенная высота (метры)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 67,
                    "context": "#define MOTOR_MAX_PULSE       2000    // Максимальная длительность импульса (мкс)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 76,
                    "context": "#define MAX_PACKET_SIZE      64       // Максимальный размер пакета данных"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 15,
                    "context": "#define MPU6050_REG_ACCEL_XOUT_H  0x3B"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "оси"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_097",
            "name": "Y",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 33,
                    "context": "RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 44,
                    "context": "RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 45,
                    "context": "RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 46,
                    "context": "RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 47,
                    "context": "RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 50,
                    "context": "HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 83,
                    "context": "hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 115,
                    "context": "sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "config.yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "config.yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "config.yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 80,
                    "context": "if (current_state == DRONE_STATE_FLYING) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 95,
                    "context": "if (current_time - last_telemetry_update >= TELEMETRY_UPDATE_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 119,
                    "context": "current_state = DRONE_STATE_EMERGENCY;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 28,
                    "context": "return HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, buf, 2, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 32,
                    "context": "HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, &reg, 1, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 57,
                    "context": "status = MPU6050_Write(MPU6050_REG_GYRO_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 111,
                    "context": "data->gyroscope.x = gyro_x * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 112,
                    "context": "data->gyroscope.y = gyro_y * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 113,
                    "context": "data->gyroscope.z = gyro_z * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 11,
                    "context": "#define SYSTEM_CLOCK_FREQ      80000000UL  // 80 МГц - основная частота системы"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 14,
                    "context": "#define TELEMETRY_UPDATE_PERIOD    100     // Период обновления телеметрии (10 Гц)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 32,
                    "context": "#define SYSCTL_RCC2_R     (*((volatile uint32_t *)0x400FE070))  // Регистр управления тактированием"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 33,
                    "context": "#define SYSCTL_RIS_R      (*((volatile uint32_t *)0x400FE050))  // Регистр статуса прерываний"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 34,
                    "context": "#define SYSCTL_RCGC2_R    (*((volatile uint32_t *)0x400FE108))  // Регистр тактирования периферии"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 50,
                    "context": "#define YAW_KP            3.0f"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 51,
                    "context": "#define YAW_KI            0.15f"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 52,
                    "context": "#define YAW_KD           0.075f"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 58,
                    "context": "#define MIN_BATTERY_VOLTAGE   10.5f   // Минимальное напряжение батареи (вольты)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 74,
                    "context": "#define PACKET_START_BYTE    0xAA     // Стартовый байт пакета"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 75,
                    "context": "#define PACKET_END_BYTE      0x55     // Конечный байт пакета"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 82,
                    "context": "#define GYRO_SCALE_FACTOR    0.0175f      // Коэффициент масштабирования гироскопа (град/с/LSB)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 18,
                    "context": "#define MPU6050_REG_GYRO_CONFIG   0x1B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 14,
                    "context": "DRONE_STATE_FLYING,      // В полете"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 16,
                    "context": "DRONE_STATE_EMERGENCY,   // Аварийный режим"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "оси"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_098",
            "name": "Z",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 76,
                    "context": "#define MAX_PACKET_SIZE      64       // Максимальный размер пакета данных"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "оси"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_105",
            "name": "барометру",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "по"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_106",
            "name": "батареи",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "Напряжение"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_107",
            "name": "полета",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "Время"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_108",
            "name": "крен",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "1.0",
                    "type": "-1.0 -"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Заданный"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_109",
            "name": "тангаж",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "1.0",
                    "type": "-1.0 -"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Заданный"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_110",
            "name": "рыскание",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "1.0",
                    "type": "-1.0 -"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Заданное"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_111",
            "name": "связи",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "потери"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        }
    ],
    "constants": [
        {
            "id": "const_001",
            "name": "alpha",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 12,
                    "context": "const float alpha = 0.96f; // Коэффициент фильтра"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "return alpha * (angle + gyro_rate * dt) + (1.0f - alpha) * accel_angle;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "value": "0.96f",
            "is_define": false,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_002",
            "name": "max_i",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 77,
                    "context": "const float max_i = 100.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 78,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 79,
                    "context": "i_term = max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 81,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 82,
                    "context": "i_term = -max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 83,
                    "context": "pid->integral = -max_i / pid->ki;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "value": "100.0f",
            "is_define": false,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_003",
            "name": "max_output",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "const float max_output = 500.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "pid->output = max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 98,
                    "context": "pid->output = -max_output;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "value": "500.0f",
            "is_define": false,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_004",
            "name": "CONSTANTS_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 1,
                    "context": "#ifndef CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 2,
                    "context": "#define CONSTANTS_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "#include <stdint.h>",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_005",
            "name": "SYSTEM_CLOCK_FREQ",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 11,
                    "context": "#define SYSTEM_CLOCK_FREQ      80000000UL  // 80 МГц - основная частота системы"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "80000000UL  // 80 МГц - основная частота системы",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_006",
            "name": "TELEMETRY_UPDATE_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 95,
                    "context": "if (current_time - last_telemetry_update >= TELEMETRY_UPDATE_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 14,
                    "context": "#define TELEMETRY_UPDATE_PERIOD    100     // Период обновления телеметрии (10 Гц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "100     // Период обновления телеметрии (10 Гц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_007",
            "name": "SENSOR_READ_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 15,
                    "context": "#define SENSOR_READ_PERIOD         10      // Период опроса датчиков (100 Гц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "10      // Период опроса датчиков (100 Гц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_008",
            "name": "CONTROL_LOOP_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 16,
                    "context": "#define CONTROL_LOOP_PERIOD        5       // Период цикла управления (200 Гц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "5       // Период цикла управления (200 Гц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_009",
            "name": "WATCHDOG_UPDATE_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 17,
                    "context": "#define WATCHDOG_UPDATE_PERIOD     500     // Период обновления сторожевого таймера"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "500     // Период обновления сторожевого таймера",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_010",
            "name": "GPIO_PORTA_BASE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 22,
                    "context": "#define GPIO_PORTA_BASE    0x40004000  // Порт A - основной порт для UART и датчиков"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x40004000  // Порт A - основной порт для UART и датчиков",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_011",
            "name": "GPIO_PORTB_BASE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 23,
                    "context": "#define GPIO_PORTB_BASE    0x40005000  // Порт B - дополнительные периферийные устройства"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x40005000  // Порт B - дополнительные периферийные устройства",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_012",
            "name": "GPIO_PORTC_BASE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 24,
                    "context": "#define GPIO_PORTC_BASE    0x40006000  // Порт C - отладочные выходы и LED индикация"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x40006000  // Порт C - отладочные выходы и LED индикация",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_013",
            "name": "GPIO_PORTD_BASE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 25,
                    "context": "#define GPIO_PORTD_BASE    0x40007000  // Порт D - интерфейсы для моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x40007000  // Порт D - интерфейсы для моторов",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_014",
            "name": "GPIO_PORTE_BASE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 26,
                    "context": "#define GPIO_PORTE_BASE    0x40024000  // Порт E - дополнительные входы/выходы"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x40024000  // Порт E - дополнительные входы/выходы",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_015",
            "name": "GPIO_PORTF_BASE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 27,
                    "context": "#define GPIO_PORTF_BASE    0x40025000  // Порт F - встроенные светодиоды и кнопки"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x40025000  // Порт F - встроенные светодиоды и кнопки",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_016",
            "name": "SYSCTL_RCC2_R",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 32,
                    "context": "#define SYSCTL_RCC2_R     (*((volatile uint32_t *)0x400FE070))  // Регистр управления тактированием"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "(*((volatile uint32_t *)0x400FE070))  // Регистр управления тактированием",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_017",
            "name": "SYSCTL_RIS_R",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 33,
                    "context": "#define SYSCTL_RIS_R      (*((volatile uint32_t *)0x400FE050))  // Регистр статуса прерываний"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "(*((volatile uint32_t *)0x400FE050))  // Регистр статуса прерываний",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_018",
            "name": "SYSCTL_RCGC2_R",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 34,
                    "context": "#define SYSCTL_RCGC2_R    (*((volatile uint32_t *)0x400FE108))  // Регистр тактирования периферии"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "(*((volatile uint32_t *)0x400FE108))  // Регистр тактирования периферии",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_019",
            "name": "ROLL_KP",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 56,
                    "context": "config.roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 40,
                    "context": "#define ROLL_KP           2.0f    // Пропорциональный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "2.0f    // Пропорциональный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_020",
            "name": "ROLL_KI",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 57,
                    "context": "config.roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 41,
                    "context": "#define ROLL_KI           0.1f    // Интегральный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.1f    // Интегральный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_021",
            "name": "ROLL_KD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 58,
                    "context": "config.roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 42,
                    "context": "#define ROLL_KD           0.05f   // Дифференциальный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.05f   // Дифференциальный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_022",
            "name": "PITCH_KP",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 60,
                    "context": "config.pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 45,
                    "context": "#define PITCH_KP          2.0f"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "2.0f",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_023",
            "name": "PITCH_KI",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 61,
                    "context": "config.pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 46,
                    "context": "#define PITCH_KI          0.1f"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.1f",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_024",
            "name": "PITCH_KD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 62,
                    "context": "config.pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 47,
                    "context": "#define PITCH_KD          0.05f"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.05f",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_025",
            "name": "YAW_KP",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "config.yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 50,
                    "context": "#define YAW_KP            3.0f"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "3.0f",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_026",
            "name": "YAW_KI",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "config.yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 51,
                    "context": "#define YAW_KI            0.15f"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.15f",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_027",
            "name": "YAW_KD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "config.yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 52,
                    "context": "#define YAW_KD           0.075f"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.075f",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_028",
            "name": "MAX_SAFE_ANGLE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 51,
                    "context": "config.max_angle = MAX_SAFE_ANGLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "telemetry.attitude.roll > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 116,
                    "context": "telemetry.attitude.pitch > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 57,
                    "context": "#define MAX_SAFE_ANGLE        45.0f   // Максимальный безопасный угол наклона (градусы)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "45.0f   // Максимальный безопасный угол наклона (градусы)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_029",
            "name": "MIN_BATTERY_VOLTAGE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 58,
                    "context": "#define MIN_BATTERY_VOLTAGE   10.5f   // Минимальное напряжение батареи (вольты)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "10.5f   // Минимальное напряжение батареи (вольты)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_030",
            "name": "MAX_ALTITUDE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 52,
                    "context": "config.max_altitude = MAX_ALTITUDE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 117,
                    "context": "telemetry.attitude.altitude > MAX_ALTITUDE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 59,
                    "context": "#define MAX_ALTITUDE         100.0f   // Максимальная разрешенная высота (метры)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "100.0f   // Максимальная разрешенная высота (метры)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_031",
            "name": "CRITICAL_TEMP",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 114,
                    "context": "telemetry.sensors.temperature > CRITICAL_TEMP ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 60,
                    "context": "#define CRITICAL_TEMP         60.0f   // Критическая температура контроллера (°C)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "60.0f   // Критическая температура контроллера (°C)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_032",
            "name": "MOTOR_PWM_FREQ",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 65,
                    "context": "#define MOTOR_PWM_FREQ        400     // Частота ШИМ для моторов (Гц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "400     // Частота ШИМ для моторов (Гц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_033",
            "name": "MOTOR_MIN_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 86,
                    "context": ".front_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 87,
                    "context": ".front_right = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 88,
                    "context": ".rear_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 89,
                    "context": ".rear_right = MOTOR_MIN_PULSE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 14,
                    "context": ".front_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 15,
                    "context": ".front_right = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 16,
                    "context": ".rear_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 17,
                    "context": ".rear_right = MOTOR_MIN_PULSE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "if (value < MOTOR_MIN_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 40,
                    "context": "return MOTOR_MIN_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 107,
                    "context": "uint16_t base_pulse = MOTOR_MIN_PULSE +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "(uint16_t)((MOTOR_MAX_PULSE - MOTOR_MIN_PULSE) * throttle);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 66,
                    "context": "#define MOTOR_MIN_PULSE       1000    // Минимальная длительность импульса (мкс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "1000    // Минимальная длительность импульса (мкс)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_034",
            "name": "MOTOR_MAX_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 42,
                    "context": "if (value > MOTOR_MAX_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 43,
                    "context": "return MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "(uint16_t)((MOTOR_MAX_PULSE - MOTOR_MIN_PULSE) * throttle);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 67,
                    "context": "#define MOTOR_MAX_PULSE       2000    // Максимальная длительность импульса (мкс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "2000    // Максимальная длительность импульса (мкс)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_035",
            "name": "MOTOR_ARM_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 68,
                    "context": "#define MOTOR_ARM_PULSE       1100    // Импульс для армирования моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "1100    // Импульс для армирования моторов",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_036",
            "name": "UART_BAUD_RATE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 73,
                    "context": "#define UART_BAUD_RATE       115200   // Скорость UART (бод)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "115200   // Скорость UART (бод)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_037",
            "name": "PACKET_START_BYTE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 74,
                    "context": "#define PACKET_START_BYTE    0xAA     // Стартовый байт пакета"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0xAA     // Стартовый байт пакета",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_038",
            "name": "PACKET_END_BYTE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 75,
                    "context": "#define PACKET_END_BYTE      0x55     // Конечный байт пакета"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x55     // Конечный байт пакета",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_039",
            "name": "MAX_PACKET_SIZE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 76,
                    "context": "#define MAX_PACKET_SIZE      64       // Максимальный размер пакета данных"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "64       // Максимальный размер пакета данных",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_040",
            "name": "ACCEL_SCALE_FACTOR",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 106,
                    "context": "data->accelerometer.x = accel_x * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 107,
                    "context": "data->accelerometer.y = accel_y * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 108,
                    "context": "data->accelerometer.z = accel_z * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 81,
                    "context": "#define ACCEL_SCALE_FACTOR   0.000244f    // Коэффициент масштабирования акселерометра (g/LSB)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.000244f    // Коэффициент масштабирования акселерометра (g/LSB)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_041",
            "name": "GYRO_SCALE_FACTOR",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 111,
                    "context": "data->gyroscope.x = gyro_x * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 112,
                    "context": "data->gyroscope.y = gyro_y * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 113,
                    "context": "data->gyroscope.z = gyro_z * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 82,
                    "context": "#define GYRO_SCALE_FACTOR    0.0175f      // Коэффициент масштабирования гироскопа (град/с/LSB)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.0175f      // Коэффициент масштабирования гироскопа (град/с/LSB)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_042",
            "name": "MAG_SCALE_FACTOR",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 83,
                    "context": "#define MAG_SCALE_FACTOR     0.15f        // Коэффициент масштабирования магнетометра (мГаусс/LSB)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.15f        // Коэффициент масштабирования магнетометра (мГаусс/LSB)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_043",
            "name": "HARDWARE_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 1,
                    "context": "#ifndef HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 2,
                    "context": "#define HARDWARE_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "#include \"constants.h\"",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_044",
            "name": "MPU6050_ADDR",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 28,
                    "context": "return HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, buf, 2, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 32,
                    "context": "HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, &reg, 1, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 14,
                    "context": "#define MPU6050_ADDR              0x68  // Адрес I2C MPU6050"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x68  // Адрес I2C MPU6050",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_045",
            "name": "MPU6050_REG_ACCEL_XOUT_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "if (MPU6050_Read(MPU6050_REG_ACCEL_XOUT_H, raw_data, 14) != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 15,
                    "context": "#define MPU6050_REG_ACCEL_XOUT_H  0x3B"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x3B",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_046",
            "name": "MPU6050_REG_PWR_MGMT_1",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 41,
                    "context": "status = MPU6050_Read(MPU6050_REG_PWR_MGMT_1, &check, 1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 47,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 16,
                    "context": "#define MPU6050_REG_PWR_MGMT_1    0x6B"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x6B",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_047",
            "name": "MPU6050_REG_CONFIG",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 17,
                    "context": "#define MPU6050_REG_CONFIG        0x1A"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x1A",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_048",
            "name": "MPU6050_REG_GYRO_CONFIG",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 57,
                    "context": "status = MPU6050_Write(MPU6050_REG_GYRO_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 18,
                    "context": "#define MPU6050_REG_GYRO_CONFIG   0x1B"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x1B",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_049",
            "name": "MPU6050_REG_ACCEL_CONFIG",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "status = MPU6050_Write(MPU6050_REG_ACCEL_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 19,
                    "context": "#define MPU6050_REG_ACCEL_CONFIG  0x1C"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x1C",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_050",
            "name": "TIMER_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 102,
                    "context": "htim3.Init.Period = TIMER_PERIOD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 22,
                    "context": "#define TIMER_PERIOD              20000 // 20ms период (50Hz)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "20000 // 20ms период (50Hz)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_051",
            "name": "TIMER_PRESCALER",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 100,
                    "context": "htim3.Init.Prescaler = TIMER_PRESCALER;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 23,
                    "context": "#define TIMER_PRESCALER          84     // Предделитель для частоты 84MHz"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "84     // Предделитель для частоты 84MHz",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_052",
            "name": "MOTOR1_PIN",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 63,
                    "context": "GPIO_InitStruct.Pin = MOTOR1_PIN | MOTOR2_PIN | MOTOR3_PIN | MOTOR4_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 26,
                    "context": "#define MOTOR1_PIN               GPIO_PIN_6"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_6",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_053",
            "name": "MOTOR1_GPIO_PORT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 27,
                    "context": "#define MOTOR1_GPIO_PORT         GPIOC"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIOC",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_054",
            "name": "MOTOR2_PIN",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 63,
                    "context": "GPIO_InitStruct.Pin = MOTOR1_PIN | MOTOR2_PIN | MOTOR3_PIN | MOTOR4_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 28,
                    "context": "#define MOTOR2_PIN               GPIO_PIN_7"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_7",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_055",
            "name": "MOTOR2_GPIO_PORT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 29,
                    "context": "#define MOTOR2_GPIO_PORT         GPIOC"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIOC",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_056",
            "name": "MOTOR3_PIN",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 63,
                    "context": "GPIO_InitStruct.Pin = MOTOR1_PIN | MOTOR2_PIN | MOTOR3_PIN | MOTOR4_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 30,
                    "context": "#define MOTOR3_PIN               GPIO_PIN_8"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_8",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_057",
            "name": "MOTOR3_GPIO_PORT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 31,
                    "context": "#define MOTOR3_GPIO_PORT         GPIOC"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIOC",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_058",
            "name": "MOTOR4_PIN",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 63,
                    "context": "GPIO_InitStruct.Pin = MOTOR1_PIN | MOTOR2_PIN | MOTOR3_PIN | MOTOR4_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 32,
                    "context": "#define MOTOR4_PIN               GPIO_PIN_9"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_9",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_059",
            "name": "MOTOR4_GPIO_PORT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 33,
                    "context": "#define MOTOR4_GPIO_PORT         GPIOC"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIOC",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_060",
            "name": "I2C_SCL_PIN",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 71,
                    "context": "GPIO_InitStruct.Pin = I2C_SCL_PIN | I2C_SDA_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 36,
                    "context": "#define I2C_SCL_PIN             GPIO_PIN_8"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_8",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_061",
            "name": "I2C_SCL_GPIO_PORT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 37,
                    "context": "#define I2C_SCL_GPIO_PORT       GPIOB"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIOB",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_062",
            "name": "I2C_SDA_PIN",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 71,
                    "context": "GPIO_InitStruct.Pin = I2C_SCL_PIN | I2C_SDA_PIN;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 38,
                    "context": "#define I2C_SDA_PIN             GPIO_PIN_9"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_9",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_063",
            "name": "I2C_SDA_GPIO_PORT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 39,
                    "context": "#define I2C_SDA_GPIO_PORT       GPIOB"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIOB",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_064",
            "name": "STRUCTURES_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 1,
                    "context": "#ifndef STRUCTURES_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 2,
                    "context": "#define STRUCTURES_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "#include <stdint.h>",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        }
    ],
    "variables": [
        {
            "id": "var_001",
            "name": "hi2c1",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 4,
                    "context": "I2C_HandleTypeDef hi2c1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 81,
                    "context": "hi2c1.Instance = I2C1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "hi2c1.Init.ClockSpeed = 400000;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 83,
                    "context": "hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 84,
                    "context": "hi2c1.Init.OwnAddress1 = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 85,
                    "context": "hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 86,
                    "context": "hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 87,
                    "context": "hi2c1.Init.OwnAddress2 = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 88,
                    "context": "hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 89,
                    "context": "hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "HAL_I2C_Init(&hi2c1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 28,
                    "context": "return HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, buf, 2, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 32,
                    "context": "HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, &reg, 1, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 42,
                    "context": "extern I2C_HandleTypeDef hi2c1;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "I2C_HandleTypeDef",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_002",
            "name": "htim3",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 5,
                    "context": "TIM_HandleTypeDef htim3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 99,
                    "context": "htim3.Instance = TIM3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 100,
                    "context": "htim3.Init.Prescaler = TIMER_PRESCALER;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 101,
                    "context": "htim3.Init.CounterMode = TIM_COUNTERMODE_UP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 102,
                    "context": "htim3.Init.Period = TIMER_PERIOD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 103,
                    "context": "htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 104,
                    "context": "HAL_TIM_PWM_Init(&htim3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 107,
                    "context": "HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 111,
                    "context": "HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 118,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 119,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 120,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 121,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 123,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 124,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 125,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 126,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 31,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, m1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 32,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, m2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 33,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, m3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 34,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, m4);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 43,
                    "context": "extern TIM_HandleTypeDef htim3;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "TIM_HandleTypeDef",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_003",
            "name": "huart2",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 6,
                    "context": "UART_HandleTypeDef huart2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 44,
                    "context": "extern UART_HandleTypeDef huart2;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "UART_HandleTypeDef",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_004",
            "name": "system_ticks",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 9,
                    "context": "static volatile uint32_t system_ticks = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 13,
                    "context": "system_ticks++;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 19,
                    "context": "return system_ticks;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "return",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_005",
            "name": "MOTOR_MIN_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 86,
                    "context": ".front_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 87,
                    "context": ".front_right = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 88,
                    "context": ".rear_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 89,
                    "context": ".rear_right = MOTOR_MIN_PULSE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 14,
                    "context": ".front_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 15,
                    "context": ".front_right = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 16,
                    "context": ".rear_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 17,
                    "context": ".rear_right = MOTOR_MIN_PULSE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "if (value < MOTOR_MIN_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 40,
                    "context": "return MOTOR_MIN_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 107,
                    "context": "uint16_t base_pulse = MOTOR_MIN_PULSE +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "(uint16_t)((MOTOR_MAX_PULSE - MOTOR_MIN_PULSE) * throttle);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 66,
                    "context": "#define MOTOR_MIN_PULSE       1000    // Минимальная длительность импульса (мкс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "return",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_006",
            "name": "MOTOR_MAX_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 42,
                    "context": "if (value > MOTOR_MAX_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 43,
                    "context": "return MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "(uint16_t)((MOTOR_MAX_PULSE - MOTOR_MIN_PULSE) * throttle);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 67,
                    "context": "#define MOTOR_MAX_PULSE       2000    // Максимальная длительность импульса (мкс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "return",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_007",
            "name": "value",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 5,
                    "context": "static uint16_t constrain_motor_value(uint16_t value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 25,
                    "context": "uint16_t m1 = constrain_motor_value(control->front_left);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 26,
                    "context": "uint16_t m2 = constrain_motor_value(control->front_right);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 27,
                    "context": "uint16_t m3 = constrain_motor_value(control->rear_left);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 28,
                    "context": "uint16_t m4 = constrain_motor_value(control->rear_right);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 38,
                    "context": "static uint16_t constrain_motor_value(uint16_t value) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "if (value < MOTOR_MIN_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 42,
                    "context": "if (value > MOTOR_MAX_PULSE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 45,
                    "context": "return value;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 67,
                    "context": "float error = pid->setpoint - current_value;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "return",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_008",
            "name": "check",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 37,
                    "context": "uint8_t check;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 41,
                    "context": "status = MPU6050_Read(MPU6050_REG_PWR_MGMT_1, &check, 1);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint8_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_009",
            "name": "status",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 38,
                    "context": "HAL_StatusTypeDef status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 41,
                    "context": "status = MPU6050_Read(MPU6050_REG_PWR_MGMT_1, &check, 1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 42,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 43,
                    "context": "return status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 47,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 53,
                    "context": "return status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 57,
                    "context": "status = MPU6050_Write(MPU6050_REG_GYRO_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 58,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 59,
                    "context": "return status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "status = MPU6050_Write(MPU6050_REG_ACCEL_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 64,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 65,
                    "context": "return status;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "HAL_StatusTypeDef",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_014",
            "name": "HAL_OK",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 42,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 58,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 64,
                    "context": "if (status != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 68,
                    "context": "return HAL_OK;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "if (MPU6050_Init() != HAL_OK) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "if (MPU6050_Read(MPU6050_REG_ACCEL_XOUT_H, raw_data, 14) != HAL_OK) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "return",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_015",
            "name": "return",
            "description": "TODO: Обработка ошибки",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 19,
                    "context": "return system_ticks;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 40,
                    "context": "return MOTOR_MIN_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 43,
                    "context": "return MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 45,
                    "context": "return value;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "return alpha * (angle + gyro_rate * dt) + (1.0f - alpha) * accel_angle;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 28,
                    "context": "return HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, buf, 2, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 43,
                    "context": "return status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 53,
                    "context": "return status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 59,
                    "context": "return status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 65,
                    "context": "return status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 68,
                    "context": "return HAL_OK;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 94,
                    "context": "return;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 101,
                    "context": "return pid->output;"
                }
            ],
            "comments": "TODO: Обработка ошибки",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "ошибки",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_016",
            "name": "ACCEL_SCALE_FACTOR",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 106,
                    "context": "data->accelerometer.x = accel_x * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 107,
                    "context": "data->accelerometer.y = accel_y * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 108,
                    "context": "data->accelerometer.z = accel_z * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 81,
                    "context": "#define ACCEL_SCALE_FACTOR   0.000244f    // Коэффициент масштабирования акселерометра (g/LSB)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "accel_x *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_019",
            "name": "GYRO_SCALE_FACTOR",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 111,
                    "context": "data->gyroscope.x = gyro_x * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 112,
                    "context": "data->gyroscope.y = gyro_y * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 113,
                    "context": "data->gyroscope.z = gyro_z * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 82,
                    "context": "#define GYRO_SCALE_FACTOR    0.0175f      // Коэффициент масштабирования гироскопа (град/с/LSB)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "gyro_x *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_022",
            "name": "dt",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 11,
                    "context": "static float complementary_filter(float angle, float gyro_rate, float accel_angle, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "return alpha * (angle + gyro_rate * dt) + (1.0f - alpha) * accel_angle;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 127,
                    "context": "float dt = (current_time - last_update) / 1000.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 128,
                    "context": "if (last_update == 0) dt = 0.01f; // Первый запуск"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 133,
                    "context": "dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 138,
                    "context": "dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 141,
                    "context": "filtered_yaw += data->gyroscope.z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 44,
                    "context": "float dt = (current_time - last_update) / 1000.0f; // Перевод в секунды"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 73,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 87,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "z *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_023",
            "name": "roll_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 56,
                    "context": "config.roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 57,
                    "context": "config.roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 58,
                    "context": "config.roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 22,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_024",
            "name": "pitch_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 60,
                    "context": "config.pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 61,
                    "context": "config.pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 62,
                    "context": "config.pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 30,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_025",
            "name": "yaw_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "config.yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "config.yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "config.yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 38,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 49,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_026",
            "name": "altitude_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_027",
            "name": "error",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 67,
                    "context": "float error = pid->setpoint - current_value;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 70,
                    "context": "float p_term = pid->kp * error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 73,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 87,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 88,
                    "context": "pid->prev_error = error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 69,
                    "context": "float prev_error;     // Предыдущая ошибка"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 92,
                    "context": "uint8_t errors;           // Битовое поле ошибок"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "kp *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_028",
            "name": "dt",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 11,
                    "context": "static float complementary_filter(float angle, float gyro_rate, float accel_angle, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "return alpha * (angle + gyro_rate * dt) + (1.0f - alpha) * accel_angle;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 127,
                    "context": "float dt = (current_time - last_update) / 1000.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 128,
                    "context": "if (last_update == 0) dt = 0.01f; // Первый запуск"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 133,
                    "context": "dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 138,
                    "context": "dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 141,
                    "context": "filtered_yaw += data->gyroscope.z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 44,
                    "context": "float dt = (current_time - last_update) / 1000.0f; // Перевод в секунды"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 73,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 87,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "error *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_029",
            "name": "hi2c1",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 4,
                    "context": "I2C_HandleTypeDef hi2c1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 81,
                    "context": "hi2c1.Instance = I2C1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "hi2c1.Init.ClockSpeed = 400000;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 83,
                    "context": "hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 84,
                    "context": "hi2c1.Init.OwnAddress1 = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 85,
                    "context": "hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 86,
                    "context": "hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 87,
                    "context": "hi2c1.Init.OwnAddress2 = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 88,
                    "context": "hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 89,
                    "context": "hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "HAL_I2C_Init(&hi2c1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 28,
                    "context": "return HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, buf, 2, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 32,
                    "context": "HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR << 1, &reg, 1, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 42,
                    "context": "extern I2C_HandleTypeDef hi2c1;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "I2C_HandleTypeDef",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_030",
            "name": "htim3",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 5,
                    "context": "TIM_HandleTypeDef htim3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 99,
                    "context": "htim3.Instance = TIM3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 100,
                    "context": "htim3.Init.Prescaler = TIMER_PRESCALER;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 101,
                    "context": "htim3.Init.CounterMode = TIM_COUNTERMODE_UP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 102,
                    "context": "htim3.Init.Period = TIMER_PERIOD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 103,
                    "context": "htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 104,
                    "context": "HAL_TIM_PWM_Init(&htim3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 107,
                    "context": "HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 111,
                    "context": "HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 118,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 119,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 120,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 121,
                    "context": "HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 123,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 124,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 125,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 126,
                    "context": "HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 31,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, m1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 32,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, m2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 33,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, m3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 34,
                    "context": "__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, m4);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 43,
                    "context": "extern TIM_HandleTypeDef htim3;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "TIM_HandleTypeDef",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_031",
            "name": "huart2",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 6,
                    "context": "UART_HandleTypeDef huart2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 44,
                    "context": "extern UART_HandleTypeDef huart2;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "UART_HandleTypeDef",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_032",
            "name": "x",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 111,
                    "context": "HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 19,
                    "context": "extern void InitializeSensors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 20,
                    "context": "extern void ReadSensors(SensorData* data);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 21,
                    "context": "extern void InitializeMotors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 22,
                    "context": "extern void UpdateMotors(const MotorControl* control);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 23,
                    "context": "extern void InitializeStabilization(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 25,
                    "context": "extern void InitializeCommunication(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 26,
                    "context": "extern bool ProcessCommunication(ControlCommand* cmd);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 51,
                    "context": "config.max_angle = MAX_SAFE_ANGLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 52,
                    "context": "config.max_altitude = MAX_ALTITUDE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 6,
                    "context": "static float prev_gyro_x = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 20,
                    "context": "*pitch = atan2f(-data->accelerometer.x,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 47,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "status = MPU6050_Write(MPU6050_REG_PWR_MGMT_1, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 57,
                    "context": "status = MPU6050_Write(MPU6050_REG_GYRO_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "status = MPU6050_Write(MPU6050_REG_ACCEL_CONFIG, 0x00);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 81,
                    "context": "prev_gyro_x = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 88,
                    "context": "int16_t accel_x, accel_y, accel_z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "int16_t gyro_x, gyro_y, gyro_z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 98,
                    "context": "accel_x = (raw_data[0] << 8) | raw_data[1];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 101,
                    "context": "gyro_x = (raw_data[8] << 8) | raw_data[9];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 106,
                    "context": "data->accelerometer.x = accel_x * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 111,
                    "context": "data->gyroscope.x = gyro_x * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 131,
                    "context": "data->gyroscope.x,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 144,
                    "context": "prev_gyro_x = data->gyroscope.x;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 77,
                    "context": "const float max_i = 100.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 78,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 79,
                    "context": "i_term = max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 81,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 82,
                    "context": "i_term = -max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 83,
                    "context": "pid->integral = -max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "const float max_output = 500.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "pid->output = max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 98,
                    "context": "pid->output = -max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 22,
                    "context": "#define GPIO_PORTA_BASE    0x40004000  // Порт A - основной порт для UART и датчиков"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 23,
                    "context": "#define GPIO_PORTB_BASE    0x40005000  // Порт B - дополнительные периферийные устройства"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 24,
                    "context": "#define GPIO_PORTC_BASE    0x40006000  // Порт C - отладочные выходы и LED индикация"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 25,
                    "context": "#define GPIO_PORTD_BASE    0x40007000  // Порт D - интерфейсы для моторов"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 26,
                    "context": "#define GPIO_PORTE_BASE    0x40024000  // Порт E - дополнительные входы/выходы"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 27,
                    "context": "#define GPIO_PORTF_BASE    0x40025000  // Порт F - встроенные светодиоды и кнопки"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 32,
                    "context": "#define SYSCTL_RCC2_R     (*((volatile uint32_t *)0x400FE070))  // Регистр управления тактированием"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 33,
                    "context": "#define SYSCTL_RIS_R      (*((volatile uint32_t *)0x400FE050))  // Регистр статуса прерываний"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 34,
                    "context": "#define SYSCTL_RCGC2_R    (*((volatile uint32_t *)0x400FE108))  // Регистр тактирования периферии"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 74,
                    "context": "#define PACKET_START_BYTE    0xAA     // Стартовый байт пакета"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 75,
                    "context": "#define PACKET_END_BYTE      0x55     // Конечный байт пакета"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 6,
                    "context": "#include \"stm32f4xx.h\"                  // Основной заголовочный файл для STM32F4"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 7,
                    "context": "#include \"stm32f4xx_hal.h\"              // HAL библиотека"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 8,
                    "context": "#include \"stm32f4xx_hal_gpio.h\"         // Для работы с GPIO"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 9,
                    "context": "#include \"stm32f4xx_hal_tim.h\"          // Для работы с таймерами"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 10,
                    "context": "#include \"stm32f4xx_hal_i2c.h\"          // Для работы с I2C"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 11,
                    "context": "#include \"stm32f4xx_hal_uart.h\"         // Для работы с UART"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 14,
                    "context": "#define MPU6050_ADDR              0x68  // Адрес I2C MPU6050"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 15,
                    "context": "#define MPU6050_REG_ACCEL_XOUT_H  0x3B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 16,
                    "context": "#define MPU6050_REG_PWR_MGMT_1    0x6B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 17,
                    "context": "#define MPU6050_REG_CONFIG        0x1A"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 18,
                    "context": "#define MPU6050_REG_GYRO_CONFIG   0x1B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 19,
                    "context": "#define MPU6050_REG_ACCEL_CONFIG  0x1C"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 42,
                    "context": "extern I2C_HandleTypeDef hi2c1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 43,
                    "context": "extern TIM_HandleTypeDef htim3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 44,
                    "context": "extern UART_HandleTypeDef huart2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 25,
                    "context": "float x;            // Ускорение по оси X (g)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 32,
                    "context": "float x;            // Угловая скорость по оси X (град/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 39,
                    "context": "float x;            // Магнитное поле по оси X (мГаусс)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 103,
                    "context": "uint8_t aux_flags;    // Дополнительные флаги управления"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 113,
                    "context": "float max_angle;           // Максимальный угол наклона"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 114,
                    "context": "float max_altitude;        // Максимальная высота"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_033",
            "name": "y",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 4,
                    "context": "I2C_HandleTypeDef hi2c1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 5,
                    "context": "TIM_HandleTypeDef htim3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 6,
                    "context": "UART_HandleTypeDef huart2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 9,
                    "context": "static volatile uint32_t system_ticks = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 12,
                    "context": "void SysTick_Handler(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 13,
                    "context": "system_ticks++;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 19,
                    "context": "return system_ticks;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 23,
                    "context": "void DelayMs(uint32_t ms) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 24,
                    "context": "HAL_Delay(ms);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 28,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 29,
                    "context": "RCC_OscInitTypeDef RCC_OscInitStruct = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 30,
                    "context": "RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 33,
                    "context": "RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 44,
                    "context": "RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "GPIO_InitTypeDef GPIO_InitStruct = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 83,
                    "context": "hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 95,
                    "context": "TIM_ClockConfigTypeDef sClockSourceConfig = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 96,
                    "context": "TIM_MasterConfigTypeDef sMasterConfig = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 97,
                    "context": "TIM_OC_InitTypeDef sConfigOC = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 111,
                    "context": "HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 115,
                    "context": "sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 8,
                    "context": "static Telemetry telemetry = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 13,
                    "context": "static void InitializeSystem(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 15,
                    "context": "static void UpdateTelemetry(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 16,
                    "context": "static void HandleSafety(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 33,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 36,
                    "context": "InitializeSystem();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 44,
                    "context": "static void InitializeSystem(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "config.yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "config.yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "config.yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 72,
                    "context": "static uint32_t last_telemetry_update = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 77,
                    "context": "ReadSensors(&telemetry.sensors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "UpdateStabilization(&last_command, &telemetry.sensors, &telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 82,
                    "context": "UpdateMotors(&telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 95,
                    "context": "if (current_time - last_telemetry_update >= TELEMETRY_UPDATE_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 96,
                    "context": "UpdateTelemetry();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 97,
                    "context": "last_telemetry_update = current_time;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 101,
                    "context": "HandleSafety();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 104,
                    "context": "DelayMs(1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 107,
                    "context": "static void UpdateTelemetry(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 108,
                    "context": "telemetry.state = current_state;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 111,
                    "context": "static void HandleSafety(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 114,
                    "context": "telemetry.sensors.temperature > CRITICAL_TEMP ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "telemetry.attitude.roll > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 116,
                    "context": "telemetry.attitude.pitch > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 117,
                    "context": "telemetry.attitude.altitude > MAX_ALTITUDE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 6,
                    "context": "static float prev_gyro_x = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 7,
                    "context": "static float prev_gyro_y = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 8,
                    "context": "static float prev_gyro_z = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 11,
                    "context": "static float complementary_filter(float angle, float gyro_rate, float accel_angle, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "return alpha * (angle + gyro_rate * dt) + (1.0f - alpha) * accel_angle;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 19,
                    "context": "*roll = atan2f(data->accelerometer.y, data->accelerometer.z) * 180.0f / M_PI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 21,
                    "context": "sqrtf(data->accelerometer.y * data->accelerometer.y +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 26,
                    "context": "static HAL_StatusTypeDef MPU6050_Write(uint8_t reg, uint8_t data) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 31,
                    "context": "static HAL_StatusTypeDef MPU6050_Read(uint8_t reg, uint8_t *data, uint16_t size) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 36,
                    "context": "static HAL_StatusTypeDef MPU6050_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 38,
                    "context": "HAL_StatusTypeDef status;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 48,
                    "context": "HAL_Delay(100);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 81,
                    "context": "prev_gyro_x = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 82,
                    "context": "prev_gyro_y = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 83,
                    "context": "prev_gyro_z = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 88,
                    "context": "int16_t accel_x, accel_y, accel_z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "int16_t gyro_x, gyro_y, gyro_z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 99,
                    "context": "accel_y = (raw_data[2] << 8) | raw_data[3];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 101,
                    "context": "gyro_x = (raw_data[8] << 8) | raw_data[9];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 102,
                    "context": "gyro_y = (raw_data[10] << 8) | raw_data[11];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 103,
                    "context": "gyro_z = (raw_data[12] << 8) | raw_data[13];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 107,
                    "context": "data->accelerometer.y = accel_y * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 111,
                    "context": "data->gyroscope.x = gyro_x * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 112,
                    "context": "data->gyroscope.y = gyro_y * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 113,
                    "context": "data->gyroscope.z = gyro_z * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 114,
                    "context": "data->gyroscope.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 123,
                    "context": "static float filtered_yaw = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 130,
                    "context": "filtered_roll = complementary_filter(filtered_roll,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 131,
                    "context": "data->gyroscope.x,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 135,
                    "context": "filtered_pitch = complementary_filter(filtered_pitch,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 136,
                    "context": "data->gyroscope.y,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 141,
                    "context": "filtered_yaw += data->gyroscope.z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 144,
                    "context": "prev_gyro_x = data->gyroscope.x;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 145,
                    "context": "prev_gyro_y = data->gyroscope.y;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 146,
                    "context": "prev_gyro_z = data->gyroscope.z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 158,
                    "context": "data->battery_voltage = 12.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 38,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 49,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "output->front_left  = base_pulse - (uint16_t)roll - (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->front_right = base_pulse + (uint16_t)roll - (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "output->rear_left   = base_pulse - (uint16_t)roll + (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 114,
                    "context": "output->rear_right  = base_pulse + (uint16_t)roll + (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 42,
                    "context": "extern I2C_HandleTypeDef hi2c1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 43,
                    "context": "extern TIM_HandleTypeDef htim3;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 44,
                    "context": "extern UART_HandleTypeDef huart2;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 47,
                    "context": "void SystemClock_Config(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 55,
                    "context": "void DelayMs(uint32_t ms);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 10,
                    "context": "typedef enum {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 23,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 26,
                    "context": "float y;            // Ускорение по оси Y (g)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 33,
                    "context": "float y;            // Угловая скорость по оси Y (град/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 36,
                    "context": "} gyroscope;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 40,
                    "context": "float y;            // Магнитное поле по оси Y (мГаусс)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 47,
                    "context": "float battery_voltage;      // Напряжение батареи (вольты)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 53,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 56,
                    "context": "float yaw;            // Рыскание (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 63,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 76,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 86,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 93,
                    "context": "} Telemetry;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 98,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 102,
                    "context": "float yaw;            // Заданное рыскание (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 109,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_034",
            "name": "z",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 111,
                    "context": "HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 13,
                    "context": "static void InitializeSystem(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 19,
                    "context": "extern void InitializeSensors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 21,
                    "context": "extern void InitializeMotors(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 23,
                    "context": "extern void InitializeStabilization(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 25,
                    "context": "extern void InitializeCommunication(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 36,
                    "context": "InitializeSystem();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 44,
                    "context": "static void InitializeSystem(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 46,
                    "context": "InitializeSensors();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 47,
                    "context": "InitializeMotors();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 48,
                    "context": "InitializeStabilization();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "UpdateStabilization(&last_command, &telemetry.sensors, &telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 7,
                    "context": "void InitializeMotors(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 8,
                    "context": "static float prev_gyro_z = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 19,
                    "context": "*roll = atan2f(data->accelerometer.y, data->accelerometer.z) * 180.0f / M_PI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 22,
                    "context": "data->accelerometer.z * data->accelerometer.z)) * 180.0f / M_PI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 31,
                    "context": "static HAL_StatusTypeDef MPU6050_Read(uint8_t reg, uint8_t *data, uint16_t size) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "return HAL_I2C_Master_Receive(&hi2c1, (MPU6050_ADDR << 1) | 0x01, data, size, HAL_MAX_DELAY);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 71,
                    "context": "void InitializeSensors(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 83,
                    "context": "prev_gyro_z = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 88,
                    "context": "int16_t accel_x, accel_y, accel_z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "int16_t gyro_x, gyro_y, gyro_z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 100,
                    "context": "accel_z = (raw_data[4] << 8) | raw_data[5];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 103,
                    "context": "gyro_z = (raw_data[12] << 8) | raw_data[13];"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 108,
                    "context": "data->accelerometer.z = accel_z * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 113,
                    "context": "data->gyroscope.z = gyro_z * GYRO_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 141,
                    "context": "filtered_yaw += data->gyroscope.z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 146,
                    "context": "prev_gyro_z = data->gyroscope.z;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 15,
                    "context": "void InitializeStabilization(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 41,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 27,
                    "context": "float z;            // Ускорение по оси Z (g)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 34,
                    "context": "float z;            // Угловая скорость по оси Z (град/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 41,
                    "context": "float z;            // Магнитное поле по оси Z (мГаусс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_035",
            "name": "timestamp",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 109,
                    "context": "data->accelerometer.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 114,
                    "context": "data->gyroscope.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 28,
                    "context": "uint32_t timestamp; // Временная метка измерения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 35,
                    "context": "uint32_t timestamp; // Временная метка измерения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 42,
                    "context": "uint32_t timestamp; // Временная метка измерения"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint32_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_044",
            "name": "barometer_altitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 151,
                    "context": "data->barometer_altitude = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 45,
                    "context": "float barometer_altitude;    // Высота по барометру (метры)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_045",
            "name": "temperature",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 114,
                    "context": "telemetry.sensors.temperature > CRITICAL_TEMP ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 155,
                    "context": "data->temperature = (float)temp_raw / 340.0f + 36.53f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 46,
                    "context": "float temperature;          // Температура (градусы Цельсия)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_046",
            "name": "battery_voltage",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 158,
                    "context": "data->battery_voltage = 12.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 47,
                    "context": "float battery_voltage;      // Напряжение батареи (вольты)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_047",
            "name": "roll",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 56,
                    "context": "config.roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 57,
                    "context": "config.roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 58,
                    "context": "config.roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "telemetry.attitude.roll > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 17,
                    "context": "static void calculate_accel_angles(const SensorData* data, float* roll, float* pitch) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 19,
                    "context": "*roll = atan2f(data->accelerometer.y, data->accelerometer.z) * 180.0f / M_PI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 117,
                    "context": "float accel_roll, accel_pitch;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 118,
                    "context": "calculate_accel_angles(data, &accel_roll, &accel_pitch);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 121,
                    "context": "static float filtered_roll = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 130,
                    "context": "filtered_roll = complementary_filter(filtered_roll,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 132,
                    "context": "accel_roll,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 22,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "output->front_left  = base_pulse - (uint16_t)roll - (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->front_right = base_pulse + (uint16_t)roll - (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "output->rear_left   = base_pulse - (uint16_t)roll + (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 114,
                    "context": "output->rear_right  = base_pulse + (uint16_t)roll + (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 54,
                    "context": "float roll;            // Крен (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 71,
                    "context": "} PIDController;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 100,
                    "context": "float roll;           // Заданный крен (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_048",
            "name": "pitch",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 60,
                    "context": "config.pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 61,
                    "context": "config.pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 62,
                    "context": "config.pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 116,
                    "context": "telemetry.attitude.pitch > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 17,
                    "context": "static void calculate_accel_angles(const SensorData* data, float* roll, float* pitch) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 20,
                    "context": "*pitch = atan2f(-data->accelerometer.x,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 117,
                    "context": "float accel_roll, accel_pitch;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 118,
                    "context": "calculate_accel_angles(data, &accel_roll, &accel_pitch);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 122,
                    "context": "static float filtered_pitch = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 135,
                    "context": "filtered_pitch = complementary_filter(filtered_pitch,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 137,
                    "context": "accel_pitch,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 30,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "output->front_left  = base_pulse - (uint16_t)roll - (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->front_right = base_pulse + (uint16_t)roll - (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "output->rear_left   = base_pulse - (uint16_t)roll + (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 114,
                    "context": "output->rear_right  = base_pulse + (uint16_t)roll + (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 55,
                    "context": "float pitch;           // Тангаж (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 101,
                    "context": "float pitch;          // Заданный тангаж (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_049",
            "name": "yaw",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "config.yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "config.yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "config.yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 123,
                    "context": "static float filtered_yaw = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 141,
                    "context": "filtered_yaw += data->gyroscope.z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 38,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 49,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "output->front_left  = base_pulse - (uint16_t)roll - (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->front_right = base_pulse + (uint16_t)roll - (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "output->rear_left   = base_pulse - (uint16_t)roll + (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 114,
                    "context": "output->rear_right  = base_pulse + (uint16_t)roll + (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 56,
                    "context": "float yaw;            // Рыскание (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 102,
                    "context": "float yaw;            // Заданное рыскание (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_050",
            "name": "altitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 52,
                    "context": "config.max_altitude = MAX_ALTITUDE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 117,
                    "context": "telemetry.attitude.altitude > MAX_ALTITUDE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 151,
                    "context": "data->barometer_altitude = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 45,
                    "context": "float barometer_altitude;    // Высота по барометру (метры)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 57,
                    "context": "float altitude;       // Высота (метры)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 114,
                    "context": "float max_altitude;        // Максимальная высота"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_051",
            "name": "kp",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 56,
                    "context": "config.roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 60,
                    "context": "config.pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "config.yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 70,
                    "context": "float p_term = pid->kp * error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 64,
                    "context": "float kp;             // Пропорциональный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_052",
            "name": "ki",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 57,
                    "context": "config.roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 61,
                    "context": "config.pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "config.yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 74,
                    "context": "float i_term = pid->ki * pid->integral;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 83,
                    "context": "pid->integral = -max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 65,
                    "context": "float ki;             // Интегральный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_053",
            "name": "kd",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 58,
                    "context": "config.roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 62,
                    "context": "config.pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "config.yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 87,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 66,
                    "context": "float kd;             // Дифференциальный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_054",
            "name": "setpoint",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 22,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 30,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 38,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 49,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 67,
                    "context": "float error = pid->setpoint - current_value;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 67,
                    "context": "float setpoint;       // Целевое значение"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_055",
            "name": "integral",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 73,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 74,
                    "context": "float i_term = pid->ki * pid->integral;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 83,
                    "context": "pid->integral = -max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 68,
                    "context": "float integral;       // Интегральная составляющая"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_056",
            "name": "prev_error",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 87,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 88,
                    "context": "pid->prev_error = error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 69,
                    "context": "float prev_error;     // Предыдущая ошибка"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_057",
            "name": "output",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 41,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 91,
                    "context": "pid->output = p_term + i_term + d_term;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "const float max_output = 500.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "pid->output = max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 98,
                    "context": "pid->output = -max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 101,
                    "context": "return pid->output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "output->front_left  = base_pulse - (uint16_t)roll - (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->front_right = base_pulse + (uint16_t)roll - (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "output->rear_left   = base_pulse - (uint16_t)roll + (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 114,
                    "context": "output->rear_right  = base_pulse + (uint16_t)roll + (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 70,
                    "context": "float output;         // Выход регулятора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_058",
            "name": "front_left",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 86,
                    "context": ".front_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 14,
                    "context": ".front_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 25,
                    "context": "uint16_t m1 = constrain_motor_value(control->front_left);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "output->front_left  = base_pulse - (uint16_t)roll - (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 77,
                    "context": "uint16_t front_left;   // Значение ШИМ для переднего левого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_059",
            "name": "front_right",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 87,
                    "context": ".front_right = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 15,
                    "context": ".front_right = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 26,
                    "context": "uint16_t m2 = constrain_motor_value(control->front_right);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->front_right = base_pulse + (uint16_t)roll - (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 78,
                    "context": "uint16_t front_right;  // Значение ШИМ для переднего правого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_060",
            "name": "rear_left",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 88,
                    "context": ".rear_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 16,
                    "context": ".rear_left = MOTOR_MIN_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 27,
                    "context": "uint16_t m3 = constrain_motor_value(control->rear_left);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "output->rear_left   = base_pulse - (uint16_t)roll + (uint16_t)pitch - (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 79,
                    "context": "uint16_t rear_left;    // Значение ШИМ для заднего левого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_061",
            "name": "rear_right",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 89,
                    "context": ".rear_right = MOTOR_MIN_PULSE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 17,
                    "context": ".rear_right = MOTOR_MIN_PULSE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 28,
                    "context": "uint16_t m4 = constrain_motor_value(control->rear_right);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 114,
                    "context": "output->rear_right  = base_pulse + (uint16_t)roll + (uint16_t)pitch + (uint16_t)yaw;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 80,
                    "context": "uint16_t rear_right;   // Значение ШИМ для заднего правого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_062",
            "name": "state",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 7,
                    "context": "static DroneState current_state = DRONE_STATE_INIT;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 68,
                    "context": "current_state = DRONE_STATE_IDLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 80,
                    "context": "if (current_state == DRONE_STATE_FLYING) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 108,
                    "context": "telemetry.state = current_state;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 119,
                    "context": "current_state = DRONE_STATE_EMERGENCY;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 87,
                    "context": "DroneState state;          // Текущее состояние дрона"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "DroneState",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_063",
            "name": "attitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "telemetry.attitude.roll > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 116,
                    "context": "telemetry.attitude.pitch > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 117,
                    "context": "telemetry.attitude.altitude > MAX_ALTITUDE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 88,
                    "context": "Attitude attitude;         // Текущая ориентация"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "Attitude",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_064",
            "name": "sensors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 77,
                    "context": "ReadSensors(&telemetry.sensors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "UpdateStabilization(&last_command, &telemetry.sensors, &telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 113,
                    "context": "if (telemetry.sensors.battery_voltage < MIN_BATTERY_VOLTAGE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 114,
                    "context": "telemetry.sensors.temperature > CRITICAL_TEMP ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 41,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 89,
                    "context": "SensorData sensors;        // Данные с датчиков"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "SensorData",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_065",
            "name": "motors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "UpdateStabilization(&last_command, &telemetry.sensors, &telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 82,
                    "context": "UpdateMotors(&telemetry.motors);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 85,
                    "context": "MotorControl motors_off = {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 91,
                    "context": "UpdateMotors(&motors_off);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 90,
                    "context": "MotorControl motors;       // Значения моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "MotorControl",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_066",
            "name": "flight_time",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 91,
                    "context": "uint32_t flight_time;      // Время полета (мс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint32_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_067",
            "name": "errors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 92,
                    "context": "uint8_t errors;           // Битовое поле ошибок"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint8_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_068",
            "name": "throttle",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 57,
                    "context": "float base_throttle = 0.5f; // 50% мощности"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 60,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "(uint16_t)((MOTOR_MAX_PULSE - MOTOR_MIN_PULSE) * throttle);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 99,
                    "context": "float throttle;        // Газ (0.0 - 1.0)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_072",
            "name": "aux_flags",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 103,
                    "context": "uint8_t aux_flags;    // Дополнительные флаги управления"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint8_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_073",
            "name": "roll_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 56,
                    "context": "config.roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 57,
                    "context": "config.roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 58,
                    "context": "config.roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 22,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_074",
            "name": "pitch_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 60,
                    "context": "config.pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 61,
                    "context": "config.pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 62,
                    "context": "config.pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 30,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_075",
            "name": "yaw_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "config.yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "config.yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "config.yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 38,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 49,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 54,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_076",
            "name": "max_angle",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 51,
                    "context": "config.max_angle = MAX_SAFE_ANGLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 113,
                    "context": "float max_angle;           // Максимальный угол наклона"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_077",
            "name": "max_altitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 52,
                    "context": "config.max_altitude = MAX_ALTITUDE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 114,
                    "context": "float max_altitude;        // Максимальная высота"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_078",
            "name": "failsafe_timeout",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 53,
                    "context": "config.failsafe_timeout = 1000; // 1 секунда"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 115,
                    "context": "uint16_t failsafe_timeout; // Таймаут потери связи (мс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        }
    ],
    "structures": [
        {
            "id": "struct_001",
            "name": "accelerometer",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 19,
                    "context": "*roll = atan2f(data->accelerometer.y, data->accelerometer.z) * 180.0f / M_PI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 20,
                    "context": "*pitch = atan2f(-data->accelerometer.x,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 21,
                    "context": "sqrtf(data->accelerometer.y * data->accelerometer.y +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 22,
                    "context": "data->accelerometer.z * data->accelerometer.z)) * 180.0f / M_PI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 106,
                    "context": "data->accelerometer.x = accel_x * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 107,
                    "context": "data->accelerometer.y = accel_y * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 108,
                    "context": "data->accelerometer.z = accel_z * ACCEL_SCALE_FACTOR;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 109,
                    "context": "data->accelerometer.timestamp = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 29,
                    "context": "} accelerometer;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_002",
            "name": "Attitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 58,
                    "context": "} Attitude;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 88,
                    "context": "Attitude attitude;         // Текущая ориентация"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_003",
            "name": "PIDController",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 71,
                    "context": "} PIDController;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_004",
            "name": "MotorControl",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 22,
                    "context": "extern void UpdateMotors(const MotorControl* control);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 85,
                    "context": "MotorControl motors_off = {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 13,
                    "context": "MotorControl initial = {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 23,
                    "context": "void UpdateMotors(const MotorControl* control) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 13,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 41,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 105,
                    "context": "static void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 81,
                    "context": "} MotorControl;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 90,
                    "context": "MotorControl motors;       // Значения моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_005",
            "name": "Telemetry",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 8,
                    "context": "static Telemetry telemetry = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 15,
                    "context": "static void UpdateTelemetry(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 96,
                    "context": "UpdateTelemetry();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 107,
                    "context": "static void UpdateTelemetry(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 93,
                    "context": "} Telemetry;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_006",
            "name": "ControlCommand",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 10,
                    "context": "static ControlCommand last_command = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 24,
                    "context": "extern void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 26,
                    "context": "extern bool ProcessCommunication(ControlCommand* cmd);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 41,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 104,
                    "context": "} ControlCommand;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_007",
            "name": "DroneConfig",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 9,
                    "context": "static DroneConfig config = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 116,
                    "context": "} DroneConfig;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        }
    ]
}