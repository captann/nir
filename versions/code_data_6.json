{
    "functions": [
        {
            "id": "func_001",
            "name": "SysTick_Handler",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 19,
                    "context": "void SysTick_Handler(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_002",
            "name": "GetMillis",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 24,
                    "context": "uint32_t GetMillis(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 13,
                    "context": "uint32_t now = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 99,
                    "context": "uint32_t now = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 85,
                    "context": "uint32_t now = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 14,
                    "context": "uint32_t GetMillis(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "uint32_t"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_003",
            "name": "DelayMs",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 29,
                    "context": "void DelayMs(uint32_t ms) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 46,
                    "context": "DelayMs(100);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 15,
                    "context": "void DelayMs(uint32_t ms);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "ms",
                    "type": "uint32_t"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_004",
            "name": "SystemClock_Config",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 34,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 78,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 8,
                    "context": "void SystemClock_Config(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_005",
            "name": "SysCtlClockSet",
            "description": "Установка частоты системы на 80 МГц используя PLL",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 36,
                    "context": "SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);"
                }
            ],
            "comments": "Установка частоты системы на 80 МГц используя PLL",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "SYSCTL_XTAL_16MHZ",
                    "type": "SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "PLL"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_006",
            "name": "SysTickPeriodSet",
            "description": "Настройка SysTick для отсчета миллисекунд",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 39,
                    "context": "SysTickPeriodSet(SysCtlClockGet() / 1000);"
                }
            ],
            "comments": "Настройка SysTick для отсчета миллисекунд",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "миллисекунд"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_007",
            "name": "GPIO_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 45,
                    "context": "void GPIO_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "GPIO_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 9,
                    "context": "void GPIO_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_008",
            "name": "SysCtlPeripheralEnable",
            "description": "Включение тактирования портов",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 48,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 49,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 50,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 51,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 52,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 67,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 46,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                }
            ],
            "comments": "Включение тактирования портов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "портов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_009",
            "name": "while",
            "description": "Ожидание готовности портов",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 98,
                    "context": "while(1) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 50,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_PWM0) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 22,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 26,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 37,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                }
            ],
            "comments": "Ожидание готовности портов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "портов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_010",
            "name": "I2C_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 64,
                    "context": "void I2C_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 82,
                    "context": "I2C_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 10,
                    "context": "void I2C_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_012",
            "name": "I2C1",
            "description": "Настройка пинов I2C1 (PA6 = SCL, PA7 = SDA)",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 70,
                    "context": "GPIOPinConfigure(GPIO_PA6_I2C1SCL);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 71,
                    "context": "GPIOPinConfigure(GPIO_PA7_I2C1SDA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 76,
                    "context": "I2CMasterInitExpClk(I2C1_BASE, SysCtlClockGet(), true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 18,
                    "context": "#define MPU6050_I2C_BASE I2C1_BASE"
                }
            ],
            "comments": "Настройка пинов I2C1 (PA6 = SCL, PA7 = SDA)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "SCL",
                    "type": "PA6 ="
                },
                {
                    "name": "SDA",
                    "type": "PA7 ="
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "пинов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_013",
            "name": "I2CMasterInitExpClk",
            "description": "Инициализация I2C1 на 400 кГц",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 76,
                    "context": "I2CMasterInitExpClk(I2C1_BASE, SysCtlClockGet(), true);"
                }
            ],
            "comments": "Инициализация I2C1 на 400 кГц",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "кГц"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_014",
            "name": "Timer_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 80,
                    "context": "void Timer_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 83,
                    "context": "Timer_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 11,
                    "context": "void Timer_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_016",
            "name": "моторов",
            "description": "Настройка пинов PWM для моторов (PB6, PB7, PB4, PB5)",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 26,
                    "context": "* Константы для моторов"
                }
            ],
            "comments": "Настройка пинов PWM для моторов (PB6, PB7, PB4, PB5)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "для"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_017",
            "name": "PWMGenConfigure",
            "description": "Настройка PWM генераторов",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 93,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 94,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 65,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 66,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                }
            ],
            "comments": "Настройка PWM генераторов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "PWM_GEN_MODE_NO_SYNC",
                    "type": "PWM_GEN_MODE_UP_DOWN |"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "генераторов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_018",
            "name": "PWM",
            "description": "Установка периода PWM (20 кГц)",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 85,
                    "context": "GPIOPinConfigure(GPIO_PB6_M0PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 86,
                    "context": "GPIOPinConfigure(GPIO_PB7_M0PWM1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 87,
                    "context": "GPIOPinConfigure(GPIO_PB4_M0PWM2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 88,
                    "context": "GPIOPinConfigure(GPIO_PB5_M0PWM3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_4 | GPIO_PIN_5);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 93,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 94,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 99,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, loadVal);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 100,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, loadVal);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 103,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 104,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 107,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT | PWM_OUT_2_BIT | PWM_OUT_3_BIT, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 121,
                    "context": "Motors_SetPWM(1200, 1200, 1200, 1200);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 30,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_0, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 33,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 36,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_2, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_3, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 46,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 50,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_PWM0) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 54,
                    "context": "GPIOPinConfigure(GPIO_PB6_M0PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 55,
                    "context": "GPIOPinConfigure(GPIO_PB7_M0PWM1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 56,
                    "context": "GPIOPinConfigure(GPIO_PB4_M0PWM2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 57,
                    "context": "GPIOPinConfigure(GPIO_PB5_M0PWM3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 59,
                    "context": "GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_4 | GPIO_PIN_5);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 63,
                    "context": "pwm_period = (pwm_clock / MOTOR_PWM_FREQ) - 1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 65,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 66,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 68,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, pwm_period);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 69,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, pwm_period);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 72,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 73,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 81,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT |"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 82,
                    "context": "PWM_OUT_2_BIT | PWM_OUT_3_BIT, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 87,
                    "context": "void Motors_SetPWM(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 98,
                    "context": "Motors_SetPWM(MOTOR_ARM_PULSE, MOTOR_ARM_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 28,
                    "context": "#define MOTOR_PWM_FREQ        20000       // Частота PWM (20 кГц)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 22,
                    "context": "#define MOTOR1_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 23,
                    "context": "#define MOTOR1_OUT PWM_OUT_0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 24,
                    "context": "#define MOTOR2_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 25,
                    "context": "#define MOTOR2_OUT PWM_OUT_1"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 26,
                    "context": "#define MOTOR3_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 27,
                    "context": "#define MOTOR3_OUT PWM_OUT_2"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 28,
                    "context": "#define MOTOR4_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 29,
                    "context": "#define MOTOR4_OUT PWM_OUT_3"
                }
            ],
            "comments": "Установка периода PWM (20 кГц)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "кГц",
                    "type": "20"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "периода"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_019",
            "name": "PWMGenEnable",
            "description": "Запуск PWM генераторов",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 103,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 104,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 72,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 73,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                }
            ],
            "comments": "Запуск PWM генераторов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "генераторов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_020",
            "name": "PWMOutputState",
            "description": "Включение выходов PWM",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 107,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT | PWM_OUT_2_BIT | PWM_OUT_3_BIT, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 81,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT |"
                }
            ],
            "comments": "Включение выходов PWM",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "PWM_OUT_3_BIT",
                    "type": "PWM_OUT_0_BIT | PWM_OUT_1_BIT | PWM_OUT_2_BIT |"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "PWM"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_021",
            "name": "update_led_indication",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 12,
                    "context": "static void update_led_indication(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 102,
                    "context": "update_led_indication();"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_022",
            "name": "if",
            "description": "Быстрое мигание",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 18,
                    "context": "if(now - last_led_toggle >= 100) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 26,
                    "context": "if(now - last_led_toggle >= 500) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 34,
                    "context": "if(now - last_led_toggle >= 1000) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 47,
                    "context": "if(now - last_led_toggle >= 50) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "if(fabsf(sensors->roll) > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 70,
                    "context": "if(sensors->battery_voltage < LOW_VOLTAGE_THRESHOLD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 105,
                    "context": "if(now - last_sensor_read >= SENSOR_READ_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "if(now - last_control_update >= CONTROL_LOOP_PERIOD &&"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 18,
                    "context": "if(pulse < MOTOR_MIN_PULSE) pulse = MOTOR_MIN_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 19,
                    "context": "if(pulse > MOTOR_MAX_PULSE) pulse = MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 88,
                    "context": "if(!motors.armed) return;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 77,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 1,
                    "context": "#ifndef CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 70,
                    "context": "#endif // CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 1,
                    "context": "#ifndef HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 37,
                    "context": "#endif // HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 1,
                    "context": "#ifndef STRUCTURES_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 118,
                    "context": "#endif // STRUCTURES_H"
                }
            ],
            "comments": "Быстрое мигание",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "100",
                    "type": "now - last_led_toggle >="
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "мигание"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_026",
            "name": "GPIOPinWrite",
            "description": "Применение состояния LED",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 59,
                    "context": "GPIOPinWrite(LED_PORT, LED_BLUE, led_state ? LED_BLUE : 0);"
                }
            ],
            "comments": "Применение состояния LED",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "0",
                    "type": "led_state ? LED_BLUE :"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "LED"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_027",
            "name": "check_safety_conditions",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 63,
                    "context": "static void check_safety_conditions(const SensorData* sensors) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 111,
                    "context": "check_safety_conditions(sensor_data);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "sensors",
                    "type": "const SensorData*"
                }
            ],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_028",
            "name": "main",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 76,
                    "context": "int main(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "int"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_029",
            "name": "SystemClock_Config",
            "description": "Настройка системного тактирования",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 34,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 78,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 8,
                    "context": "void SystemClock_Config(void);"
                }
            ],
            "comments": "Настройка системного тактирования",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "тактирования"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_030",
            "name": "GPIO_Init",
            "description": "Инициализация периферии",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 45,
                    "context": "void GPIO_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "GPIO_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 9,
                    "context": "void GPIO_Init(void);"
                }
            ],
            "comments": "Инициализация периферии",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "периферии"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_031",
            "name": "Sensors_Init",
            "description": "Инициализация подсистем",
            "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 86,
                    "context": "Sensors_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 43,
                    "context": "void Sensors_Init(void) {"
                }
            ],
            "comments": "Инициализация подсистем",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "подсистем"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_035",
            "name": "convert_to_pwm",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 17,
                    "context": "static uint32_t convert_to_pwm(uint32_t pulse) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 25,
                    "context": "uint32_t pwm_value = convert_to_pwm(pulse);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "pulse",
                    "type": "uint32_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "uint32_t"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_036",
            "name": "set_motor_pwm",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 24,
                    "context": "static void set_motor_pwm(uint8_t motor, uint32_t pulse) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 77,
                    "context": "set_motor_pwm(i, MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 90,
                    "context": "set_motor_pwm(0, m1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 91,
                    "context": "set_motor_pwm(1, m2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 92,
                    "context": "set_motor_pwm(2, m3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 93,
                    "context": "set_motor_pwm(3, m4);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 105,
                    "context": "set_motor_pwm(i, MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 116,
                    "context": "set_motor_pwm(i, MOTOR_MIN_PULSE);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "motor",
                    "type": "uint8_t"
                },
                {
                    "name": "pulse",
                    "type": "uint32_t"
                }
            ],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_037",
            "name": "Motors_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 87,
                    "context": "Motors_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 44,
                    "context": "void Motors_Init(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_038",
            "name": "SysCtlPeripheralEnable",
            "description": "Включение PWM0",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 48,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 49,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 50,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 51,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 52,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 67,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 46,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                }
            ],
            "comments": "Включение PWM0",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "PWM0"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_039",
            "name": "while",
            "description": "Ждем готовности периферии",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 98,
                    "context": "while(1) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 50,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_PWM0) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 22,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 26,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 37,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                }
            ],
            "comments": "Ждем готовности периферии",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "периферии"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_040",
            "name": "GPIOPinConfigure",
            "description": "Настройка пинов для PWM",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 70,
                    "context": "GPIOPinConfigure(GPIO_PA6_I2C1SCL);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 71,
                    "context": "GPIOPinConfigure(GPIO_PA7_I2C1SDA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 85,
                    "context": "GPIOPinConfigure(GPIO_PB6_M0PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 86,
                    "context": "GPIOPinConfigure(GPIO_PB7_M0PWM1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 87,
                    "context": "GPIOPinConfigure(GPIO_PB4_M0PWM2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 88,
                    "context": "GPIOPinConfigure(GPIO_PB5_M0PWM3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 54,
                    "context": "GPIOPinConfigure(GPIO_PB6_M0PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 55,
                    "context": "GPIOPinConfigure(GPIO_PB7_M0PWM1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 56,
                    "context": "GPIOPinConfigure(GPIO_PB4_M0PWM2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 57,
                    "context": "GPIOPinConfigure(GPIO_PB5_M0PWM3);"
                }
            ],
            "comments": "Настройка пинов для PWM",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "PWM"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_041",
            "name": "PWMGenEnable",
            "description": "Запуск PWM",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 103,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 104,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 72,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 73,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                }
            ],
            "comments": "Запуск PWM",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "PWM"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_042",
            "name": "PWMOutputState",
            "description": "Включение выходов",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 107,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT | PWM_OUT_2_BIT | PWM_OUT_3_BIT, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 81,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT |"
                }
            ],
            "comments": "Включение выходов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "PWM_OUT_3_BIT",
                    "type": "PWM_OUT_0_BIT | PWM_OUT_1_BIT | PWM_OUT_2_BIT |"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "выходов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_043",
            "name": "Motors_SetPWM",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 121,
                    "context": "Motors_SetPWM(1200, 1200, 1200, 1200);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 87,
                    "context": "void Motors_SetPWM(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 98,
                    "context": "Motors_SetPWM(MOTOR_ARM_PULSE, MOTOR_ARM_PULSE,"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "m1",
                    "type": "uint32_t"
                },
                {
                    "name": "m2",
                    "type": "uint32_t"
                },
                {
                    "name": "m3",
                    "type": "uint32_t"
                },
                {
                    "name": "m4",
                    "type": "uint32_t"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_044",
            "name": "Motors_Arm",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 96,
                    "context": "void Motors_Arm(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_045",
            "name": "Motors_Disarm",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 102,
                    "context": "void Motors_Disarm(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_046",
            "name": "Motors_IsArmed",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 109,
                    "context": "bool Motors_IsArmed(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "bool"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_047",
            "name": "Motors_EmergencyStop",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 67,
                    "context": "Motors_EmergencyStop();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 72,
                    "context": "Motors_EmergencyStop();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 113,
                    "context": "void Motors_EmergencyStop(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_048",
            "name": "I2C_WriteByte",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 18,
                    "context": "static void I2C_WriteByte(uint8_t reg, uint8_t data) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 45,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 49,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x00);    // Выход из спящего режима"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 50,
                    "context": "I2C_WriteByte(MPU6050_SMPLRT_DIV, 0x07);    // Частота сэмплирования = 1kHz"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "I2C_WriteByte(MPU6050_CONFIG, 0x06);        // Фильтр низких частот"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "I2C_WriteByte(MPU6050_GYRO_CONFIG, 0x08);   // Диапазон гироскопа ±500°/s"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 53,
                    "context": "I2C_WriteByte(MPU6050_ACCEL_CONFIG, 0x00);  // Диапазон акселерометра ±2g"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "reg",
                    "type": "uint8_t"
                },
                {
                    "name": "data",
                    "type": "uint8_t"
                }
            ],
            "output_params": [],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_049",
            "name": "I2C_ReadByte",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 29,
                    "context": "static uint8_t I2C_ReadByte(uint8_t reg) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "buffer[i] = I2C_ReadByte(MPU6050_ACCEL_XOUT_H + i);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "reg",
                    "type": "uint8_t"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "uint8_t"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_050",
            "name": "I2CMasterDataGet",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 39,
                    "context": "return I2CMasterDataGet(MPU6050_I2C_BASE);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "return"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_051",
            "name": "Sensors_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 86,
                    "context": "Sensors_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 43,
                    "context": "void Sensors_Init(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_058",
            "name": "Sensors_Read",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 106,
                    "context": "Sensors_Read();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 57,
                    "context": "void Sensors_Read(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_059",
            "name": "углов",
            "description": "Расчет углов (простой комплементарный фильтр)",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [],
            "comments": "Расчет углов (простой комплементарный фильтр)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "фильтр",
                    "type": "простой комплементарный"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Расчет"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_060",
            "name": "Sensors_GetData",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 110,
                    "context": "const SensorData* sensor_data = Sensors_GetData();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 107,
                    "context": "const SensorData* Sensors_GetData(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "SensorData*"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_061",
            "name": "update_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 65,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "pid",
                    "type": "PIDController*"
                },
                {
                    "name": "current_value",
                    "type": "float"
                },
                {
                    "name": "dt",
                    "type": "float"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "float"
                }
            ],
            "is_static": true,
            "scope": "static",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_062",
            "name": "InitializeStabilization",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 14,
                    "context": "void InitializeStabilization(void) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_063",
            "name": "UpdateStabilization",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 40,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "cmd",
                    "type": "const ControlCommand*"
                },
                {
                    "name": "sensors",
                    "type": "const SensorData*"
                },
                {
                    "name": "output",
                    "type": "MotorControl*"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_064",
            "name": "высоты",
            "description": "Базовая тяга для удержания высоты (можно настроить экспериментально)",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [],
            "comments": "Базовая тяга для удержания высоты (можно настроить экспериментально)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "экспериментально",
                    "type": "можно настроить"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "удержания"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_065",
            "name": "mix_outputs",
            "description": "Смешивание выходных сигналов для моторов",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                }
            ],
            "comments": "Смешивание выходных сигналов для моторов",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "моторов"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_067",
            "name": "if",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 18,
                    "context": "if(now - last_led_toggle >= 100) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 26,
                    "context": "if(now - last_led_toggle >= 500) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 34,
                    "context": "if(now - last_led_toggle >= 1000) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 47,
                    "context": "if(now - last_led_toggle >= 50) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "if(fabsf(sensors->roll) > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 70,
                    "context": "if(sensors->battery_voltage < LOW_VOLTAGE_THRESHOLD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 105,
                    "context": "if(now - last_sensor_read >= SENSOR_READ_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "if(now - last_control_update >= CONTROL_LOOP_PERIOD &&"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 18,
                    "context": "if(pulse < MOTOR_MIN_PULSE) pulse = MOTOR_MIN_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 19,
                    "context": "if(pulse > MOTOR_MAX_PULSE) pulse = MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 88,
                    "context": "if(!motors.armed) return;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 77,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 1,
                    "context": "#ifndef CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 70,
                    "context": "#endif // CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 1,
                    "context": "#ifndef HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 37,
                    "context": "#endif // HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 1,
                    "context": "#ifndef STRUCTURES_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 118,
                    "context": "#endif // STRUCTURES_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "-max_i",
                    "type": "i_term <"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "else"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_070",
            "name": "задач",
            "description": "Периоды для различных задач (в миллисекундах)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Периоды для различных задач (в миллисекундах)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "миллисекундах",
                    "type": "в"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "различных"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_071",
            "name": "телеметрии",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 84,
                    "context": "* Структура для телеметрии"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "Гц",
                    "type": "10"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "обновления"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_072",
            "name": "датчиков",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 21,
                    "context": "* Структура для хранения данных с датчиков"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "Гц",
                    "type": "100"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "опроса"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_073",
            "name": "управления",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 52,
                    "context": "* Пределы управления"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 74,
                    "context": "* Структура для управления моторами"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 96,
                    "context": "* Структура для команд управления"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "Гц",
                    "type": "200"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "цикла"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_074",
            "name": "PWM",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 85,
                    "context": "GPIOPinConfigure(GPIO_PB6_M0PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 86,
                    "context": "GPIOPinConfigure(GPIO_PB7_M0PWM1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 87,
                    "context": "GPIOPinConfigure(GPIO_PB4_M0PWM2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 88,
                    "context": "GPIOPinConfigure(GPIO_PB5_M0PWM3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_4 | GPIO_PIN_5);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 93,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 94,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 99,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, loadVal);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 100,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, loadVal);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 103,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 104,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 107,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT | PWM_OUT_2_BIT | PWM_OUT_3_BIT, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 121,
                    "context": "Motors_SetPWM(1200, 1200, 1200, 1200);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 30,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_0, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 33,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 36,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_2, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_3, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 46,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 50,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_PWM0) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 54,
                    "context": "GPIOPinConfigure(GPIO_PB6_M0PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 55,
                    "context": "GPIOPinConfigure(GPIO_PB7_M0PWM1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 56,
                    "context": "GPIOPinConfigure(GPIO_PB4_M0PWM2);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 57,
                    "context": "GPIOPinConfigure(GPIO_PB5_M0PWM3);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 59,
                    "context": "GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_4 | GPIO_PIN_5);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 63,
                    "context": "pwm_period = (pwm_clock / MOTOR_PWM_FREQ) - 1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 65,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 66,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 68,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, pwm_period);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 69,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, pwm_period);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 72,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 73,
                    "context": "PWMGenEnable(PWM0_BASE, PWM_GEN_1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 81,
                    "context": "PWMOutputState(PWM0_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT |"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 82,
                    "context": "PWM_OUT_2_BIT | PWM_OUT_3_BIT, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 87,
                    "context": "void Motors_SetPWM(uint32_t m1, uint32_t m2, uint32_t m3, uint32_t m4) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 98,
                    "context": "Motors_SetPWM(MOTOR_ARM_PULSE, MOTOR_ARM_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 28,
                    "context": "#define MOTOR_PWM_FREQ        20000       // Частота PWM (20 кГц)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 22,
                    "context": "#define MOTOR1_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 23,
                    "context": "#define MOTOR1_OUT PWM_OUT_0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 24,
                    "context": "#define MOTOR2_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 25,
                    "context": "#define MOTOR2_OUT PWM_OUT_1"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 26,
                    "context": "#define MOTOR3_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 27,
                    "context": "#define MOTOR3_OUT PWM_OUT_2"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 28,
                    "context": "#define MOTOR4_PWM PWM0_BASE"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 29,
                    "context": "#define MOTOR4_OUT PWM_OUT_3"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "кГц",
                    "type": "20"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Частота"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_075",
            "name": "крена",
            "description": "Коэффициенты для канала крена (Roll)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Коэффициенты для канала крена (Roll)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "канала"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_076",
            "name": "тангажа",
            "description": "Коэффициенты для канала тангажа (Pitch)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Коэффициенты для канала тангажа (Pitch)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "канала"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_077",
            "name": "рыскания",
            "description": "Коэффициенты для канала рыскания (Yaw)",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "Коэффициенты для канала рыскания (Yaw)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "канала"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_081",
            "name": "высота",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "Максимальная"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_082",
            "name": "SystemClock_Config",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 34,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 78,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 8,
                    "context": "void SystemClock_Config(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_083",
            "name": "GPIO_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 45,
                    "context": "void GPIO_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 81,
                    "context": "GPIO_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 9,
                    "context": "void GPIO_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_084",
            "name": "I2C_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 64,
                    "context": "void I2C_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 82,
                    "context": "I2C_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 10,
                    "context": "void I2C_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_085",
            "name": "Timer_Init",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 80,
                    "context": "void Timer_Init(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 83,
                    "context": "Timer_Init();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 11,
                    "context": "void Timer_Init(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_086",
            "name": "GetMillis",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 24,
                    "context": "uint32_t GetMillis(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 13,
                    "context": "uint32_t now = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 99,
                    "context": "uint32_t now = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 85,
                    "context": "uint32_t now = GetMillis();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 14,
                    "context": "uint32_t GetMillis(void);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "uint32_t"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_087",
            "name": "DelayMs",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 29,
                    "context": "void DelayMs(uint32_t ms) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 46,
                    "context": "DelayMs(100);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 15,
                    "context": "void DelayMs(uint32_t ms);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "ms",
                    "type": "uint32_t"
                }
            ],
            "output_params": [],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_088",
            "name": "моторов",
            "description": "Определения для моторов (PWM выходы)",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 26,
                    "context": "* Константы для моторов"
                }
            ],
            "comments": "Определения для моторов (PWM выходы)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "выходы",
                    "type": "PWM"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "для"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_089",
            "name": "индикации",
            "description": "Определения для LED индикации (Port F)",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [],
            "comments": "Определения для LED индикации (Port F)",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [
                {
                    "name": "F",
                    "type": "Port"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "LED"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_090",
            "name": "X",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 36,
                    "context": "SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "if(fabsf(sensors->roll) > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "fabsf(sensors->pitch) > MAX_SAFE_ANGLE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 19,
                    "context": "if(pulse > MOTOR_MAX_PULSE) pulse = MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 20,
                    "context": "return (pulse - MOTOR_MIN_PULSE) * pwm_period / (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "#define MPU6050_ACCEL_XOUT_H  0x3B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "buffer[i] = I2C_ReadByte(MPU6050_ACCEL_XOUT_H + i);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 106,
                    "context": "output->front_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "output->front_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 110,
                    "context": "output->rear_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->rear_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 116,
                    "context": "output->front_left = output->front_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 117,
                    "context": "output->front_right = output->front_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 118,
                    "context": "output->rear_left = output->rear_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 119,
                    "context": "output->rear_right = output->rear_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 30,
                    "context": "#define MOTOR_MAX_PULSE       2000        // Максимальное значение PWM"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 54,
                    "context": "#define MAX_ROLL_ANGLE       45.0f   // Максимальный угол крена (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 55,
                    "context": "#define MAX_PITCH_ANGLE      45.0f   // Максимальный угол тангажа (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 56,
                    "context": "#define MAX_YAW_RATE         180.0f  // Максимальная скорость рыскания (градусы/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 66,
                    "context": "#define MAX_SAFE_ANGLE       60.0f   // Максимальный безопасный угол наклона"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 68,
                    "context": "#define MAX_ALTITUDE         100.0f   // Максимальная высота (метры)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "оси"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_091",
            "name": "Y",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 36,
                    "context": "SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 48,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 49,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 50,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 51,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 52,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 56,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 57,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOC) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 58,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOD) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 59,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOE) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 60,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 67,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 93,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 94,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 40,
                    "context": "case DRONE_STATE_FLYING:"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 45,
                    "context": "case DRONE_STATE_EMERGENCY:"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "current_state = DRONE_STATE_EMERGENCY;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 71,
                    "context": "current_state = DRONE_STATE_EMERGENCY;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 116,
                    "context": "current_state == DRONE_STATE_FLYING) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 46,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 50,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_PWM0) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 51,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 65,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 66,
                    "context": "PWMGenConfigure(PWM0_BASE, PWM_GEN_1, PWM_GEN_MODE_UP_DOWN | PWM_GEN_MODE_NO_SYNC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 11,
                    "context": "#define MPU6050_GYRO_CONFIG   0x1B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "I2C_WriteByte(MPU6050_GYRO_CONFIG, 0x08);   // Диапазон гироскопа ±500°/s"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 75,
                    "context": "sensor_data.gyro_x = (float)raw_data[4] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "sensor_data.gyro_y = (float)raw_data[5] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 77,
                    "context": "sensor_data.gyro_z = (float)raw_data[6] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 32,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 11,
                    "context": "#define SYSTEM_CLOCK_FREQ      80000000UL  // 80 МГц - основная частота системы"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 14,
                    "context": "#define TELEMETRY_UPDATE_PERIOD    100     // Период обновления телеметрии (10 Гц)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 22,
                    "context": "#define MPU6050_GYRO_SCALE    131.0f      // Для диапазона ±250°/s"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 47,
                    "context": "#define YAW_KP               4.0f    // Пропорциональный коэффициент"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 48,
                    "context": "#define YAW_KI               0.05f   // Интегральный коэффициент"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 49,
                    "context": "#define YAW_KD              0.0f    // Дифференциальный коэффициент"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 56,
                    "context": "#define MAX_YAW_RATE         180.0f  // Максимальная скорость рыскания (градусы/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 14,
                    "context": "DRONE_STATE_FLYING,      // В полете"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 16,
                    "context": "DRONE_STATE_EMERGENCY,   // Аварийный режим"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "оси"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_092",
            "name": "Z",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 36,
                    "context": "SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "оси"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_099",
            "name": "барометру",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "по"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_100",
            "name": "батареи",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "Напряжение"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_101",
            "name": "полета",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "Время"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_102",
            "name": "крен",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [
                {
                    "name": "1.0",
                    "type": "-1.0 -"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Заданный"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_103",
            "name": "тангаж",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [
                {
                    "name": "1.0",
                    "type": "-1.0 -"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Заданный"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_104",
            "name": "рыскание",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [
                {
                    "name": "1.0",
                    "type": "-1.0 -"
                }
            ],
            "output_params": [
                {
                    "name": "return",
                    "type": "Заданное"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        },
        {
            "id": "func_105",
            "name": "связи",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": true,
            "input_params": [],
            "output_params": [
                {
                    "name": "return",
                    "type": "потери"
                }
            ],
            "is_static": false,
            "scope": "global",
            "dependencies": [],
            "called_by": []
        }
    ],
    "constants": [
        {
            "id": "const_001",
            "name": "MPU6050_PWR_MGMT_1",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 8,
                    "context": "#define MPU6050_PWR_MGMT_1    0x6B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 45,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 49,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x00);    // Выход из спящего режима"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x6B",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_002",
            "name": "MPU6050_SMPLRT_DIV",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 9,
                    "context": "#define MPU6050_SMPLRT_DIV    0x19"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 50,
                    "context": "I2C_WriteByte(MPU6050_SMPLRT_DIV, 0x07);    // Частота сэмплирования = 1kHz"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x19",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_003",
            "name": "MPU6050_CONFIG",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 10,
                    "context": "#define MPU6050_CONFIG        0x1A"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "I2C_WriteByte(MPU6050_CONFIG, 0x06);        // Фильтр низких частот"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x1A",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_004",
            "name": "MPU6050_GYRO_CONFIG",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 11,
                    "context": "#define MPU6050_GYRO_CONFIG   0x1B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "I2C_WriteByte(MPU6050_GYRO_CONFIG, 0x08);   // Диапазон гироскопа ±500°/s"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x1B",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_005",
            "name": "MPU6050_ACCEL_CONFIG",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 12,
                    "context": "#define MPU6050_ACCEL_CONFIG  0x1C"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 53,
                    "context": "I2C_WriteByte(MPU6050_ACCEL_CONFIG, 0x00);  // Диапазон акселерометра ±2g"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x1C",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_006",
            "name": "MPU6050_ACCEL_XOUT_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "#define MPU6050_ACCEL_XOUT_H  0x3B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "buffer[i] = I2C_ReadByte(MPU6050_ACCEL_XOUT_H + i);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x3B",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_007",
            "name": "max_i",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 76,
                    "context": "const float max_i = 100.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 77,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 78,
                    "context": "i_term = max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 79,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 81,
                    "context": "i_term = -max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 82,
                    "context": "pid->integral = -max_i / pid->ki;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "value": "100.0f",
            "is_define": false,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_008",
            "name": "max_output",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 93,
                    "context": "const float max_output = 500.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "pid->output = max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "pid->output = -max_output;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "value": "500.0f",
            "is_define": false,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_009",
            "name": "CONSTANTS_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 1,
                    "context": "#ifndef CONSTANTS_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 2,
                    "context": "#define CONSTANTS_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "#include <stdint.h>",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_010",
            "name": "SYSTEM_CLOCK_FREQ",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 11,
                    "context": "#define SYSTEM_CLOCK_FREQ      80000000UL  // 80 МГц - основная частота системы"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "80000000UL  // 80 МГц - основная частота системы",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_011",
            "name": "TELEMETRY_UPDATE_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 14,
                    "context": "#define TELEMETRY_UPDATE_PERIOD    100     // Период обновления телеметрии (10 Гц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "100     // Период обновления телеметрии (10 Гц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_012",
            "name": "SENSOR_READ_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 105,
                    "context": "if(now - last_sensor_read >= SENSOR_READ_PERIOD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 15,
                    "context": "#define SENSOR_READ_PERIOD         10      // Период опроса датчиков (100 Гц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "10      // Период опроса датчиков (100 Гц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_013",
            "name": "CONTROL_LOOP_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 115,
                    "context": "if(now - last_control_update >= CONTROL_LOOP_PERIOD &&"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 16,
                    "context": "#define CONTROL_LOOP_PERIOD        5       // Период цикла управления (200 Гц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "5       // Период цикла управления (200 Гц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_014",
            "name": "WATCHDOG_UPDATE_PERIOD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 17,
                    "context": "#define WATCHDOG_UPDATE_PERIOD     500     // Период обновления сторожевого таймера"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "500     // Период обновления сторожевого таймера",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_015",
            "name": "MPU6050_GYRO_SCALE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 75,
                    "context": "sensor_data.gyro_x = (float)raw_data[4] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "sensor_data.gyro_y = (float)raw_data[5] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 77,
                    "context": "sensor_data.gyro_z = (float)raw_data[6] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 22,
                    "context": "#define MPU6050_GYRO_SCALE    131.0f      // Для диапазона ±250°/s"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "131.0f      // Для диапазона ±250°/s",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_016",
            "name": "MPU6050_ACCEL_SCALE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 72,
                    "context": "sensor_data.accel_x = (float)raw_data[0] / MPU6050_ACCEL_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 73,
                    "context": "sensor_data.accel_y = (float)raw_data[1] / MPU6050_ACCEL_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 74,
                    "context": "sensor_data.accel_z = (float)raw_data[2] / MPU6050_ACCEL_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 23,
                    "context": "#define MPU6050_ACCEL_SCALE   16384.0f    // Для диапазона ±2g"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "16384.0f    // Для диапазона ±2g",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_017",
            "name": "MOTOR_PWM_FREQ",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 63,
                    "context": "pwm_period = (pwm_clock / MOTOR_PWM_FREQ) - 1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 28,
                    "context": "#define MOTOR_PWM_FREQ        20000       // Частота PWM (20 кГц)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "20000       // Частота PWM (20 кГц)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_018",
            "name": "MOTOR_MIN_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 18,
                    "context": "if(pulse < MOTOR_MIN_PULSE) pulse = MOTOR_MIN_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 20,
                    "context": "return (pulse - MOTOR_MIN_PULSE) * pwm_period / (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 77,
                    "context": "set_motor_pwm(i, MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 105,
                    "context": "set_motor_pwm(i, MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 116,
                    "context": "set_motor_pwm(i, MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 106,
                    "context": "output->front_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "output->front_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 110,
                    "context": "output->rear_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->rear_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 29,
                    "context": "#define MOTOR_MIN_PULSE       1000        // Минимальное значение PWM"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "1000        // Минимальное значение PWM",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_019",
            "name": "MOTOR_MAX_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 19,
                    "context": "if(pulse > MOTOR_MAX_PULSE) pulse = MOTOR_MAX_PULSE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 20,
                    "context": "return (pulse - MOTOR_MIN_PULSE) * pwm_period / (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 106,
                    "context": "output->front_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "output->front_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 110,
                    "context": "output->rear_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->rear_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 116,
                    "context": "output->front_left = output->front_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 117,
                    "context": "output->front_right = output->front_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 118,
                    "context": "output->rear_left = output->rear_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 119,
                    "context": "output->rear_right = output->rear_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 30,
                    "context": "#define MOTOR_MAX_PULSE       2000        // Максимальное значение PWM"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "2000        // Максимальное значение PWM",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_020",
            "name": "MOTOR_ARM_PULSE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 98,
                    "context": "Motors_SetPWM(MOTOR_ARM_PULSE, MOTOR_ARM_PULSE,"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 99,
                    "context": "MOTOR_ARM_PULSE, MOTOR_ARM_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 31,
                    "context": "#define MOTOR_ARM_PULSE       1100        // Значение PWM для армирования моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "1100        // Значение PWM для армирования моторов",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_021",
            "name": "ROLL_KP",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 16,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 37,
                    "context": "#define ROLL_KP              2.0f    // Пропорциональный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "2.0f    // Пропорциональный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_022",
            "name": "ROLL_KI",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 38,
                    "context": "#define ROLL_KI              0.1f    // Интегральный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.1f    // Интегральный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_023",
            "name": "ROLL_KD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 39,
                    "context": "#define ROLL_KD              0.05f   // Дифференциальный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.05f   // Дифференциальный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_024",
            "name": "PITCH_KP",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 24,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 42,
                    "context": "#define PITCH_KP             2.0f    // Пропорциональный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "2.0f    // Пропорциональный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_025",
            "name": "PITCH_KI",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 43,
                    "context": "#define PITCH_KI             0.1f    // Интегральный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.1f    // Интегральный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_026",
            "name": "PITCH_KD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 44,
                    "context": "#define PITCH_KD             0.05f   // Дифференциальный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.05f   // Дифференциальный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_027",
            "name": "YAW_KP",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 32,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 47,
                    "context": "#define YAW_KP               4.0f    // Пропорциональный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "4.0f    // Пропорциональный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_028",
            "name": "YAW_KI",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 48,
                    "context": "#define YAW_KI               0.05f   // Интегральный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.05f   // Интегральный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_029",
            "name": "YAW_KD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 49,
                    "context": "#define YAW_KD              0.0f    // Дифференциальный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.0f    // Дифференциальный коэффициент",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_030",
            "name": "MAX_ROLL_ANGLE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 54,
                    "context": "#define MAX_ROLL_ANGLE       45.0f   // Максимальный угол крена (градусы)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "45.0f   // Максимальный угол крена (градусы)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_031",
            "name": "MAX_PITCH_ANGLE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 55,
                    "context": "#define MAX_PITCH_ANGLE      45.0f   // Максимальный угол тангажа (градусы)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "45.0f   // Максимальный угол тангажа (градусы)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_032",
            "name": "MAX_YAW_RATE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 56,
                    "context": "#define MAX_YAW_RATE         180.0f  // Максимальная скорость рыскания (градусы/с)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "180.0f  // Максимальная скорость рыскания (градусы/с)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_033",
            "name": "COMP_FILTER_ALPHA",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "sensor_data.roll = COMP_FILTER_ALPHA * (sensor_data.roll + sensor_data.gyro_x * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 90,
                    "context": "(1.0f - COMP_FILTER_ALPHA) * accel_roll;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 91,
                    "context": "sensor_data.pitch = COMP_FILTER_ALPHA * (sensor_data.pitch + sensor_data.gyro_y * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "(1.0f - COMP_FILTER_ALPHA) * accel_pitch;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 61,
                    "context": "#define COMP_FILTER_ALPHA    0.96f   // Коэффициент комплементарного фильтра"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0.96f   // Коэффициент комплементарного фильтра",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_034",
            "name": "MAX_SAFE_ANGLE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "if(fabsf(sensors->roll) > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "fabsf(sensors->pitch) > MAX_SAFE_ANGLE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 66,
                    "context": "#define MAX_SAFE_ANGLE       60.0f   // Максимальный безопасный угол наклона"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "60.0f   // Максимальный безопасный угол наклона",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_035",
            "name": "LOW_VOLTAGE_THRESHOLD",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 70,
                    "context": "if(sensors->battery_voltage < LOW_VOLTAGE_THRESHOLD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 67,
                    "context": "#define LOW_VOLTAGE_THRESHOLD 10.5f   // Порог низкого напряжения батареи"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "10.5f   // Порог низкого напряжения батареи",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_036",
            "name": "MAX_ALTITUDE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\constants.h",
                    "line_number": 68,
                    "context": "#define MAX_ALTITUDE         100.0f   // Максимальная высота (метры)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "100.0f   // Максимальная высота (метры)",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_037",
            "name": "HARDWARE_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 1,
                    "context": "#ifndef HARDWARE_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 2,
                    "context": "#define HARDWARE_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "#include <stdint.h>",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_038",
            "name": "MPU6050_I2C_BASE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 19,
                    "context": "I2CMasterSlaveAddrSet(MPU6050_I2C_BASE, MPU6050_I2C_ADDR, false);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 20,
                    "context": "I2CMasterDataPut(MPU6050_I2C_BASE, reg);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 21,
                    "context": "I2CMasterControl(MPU6050_I2C_BASE, I2C_MASTER_CMD_BURST_SEND_START);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 22,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 24,
                    "context": "I2CMasterDataPut(MPU6050_I2C_BASE, data);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 25,
                    "context": "I2CMasterControl(MPU6050_I2C_BASE, I2C_MASTER_CMD_BURST_SEND_FINISH);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 26,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 30,
                    "context": "I2CMasterSlaveAddrSet(MPU6050_I2C_BASE, MPU6050_I2C_ADDR, false);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 31,
                    "context": "I2CMasterDataPut(MPU6050_I2C_BASE, reg);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 32,
                    "context": "I2CMasterControl(MPU6050_I2C_BASE, I2C_MASTER_CMD_SINGLE_SEND);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 35,
                    "context": "I2CMasterSlaveAddrSet(MPU6050_I2C_BASE, MPU6050_I2C_ADDR, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 36,
                    "context": "I2CMasterControl(MPU6050_I2C_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 37,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 39,
                    "context": "return I2CMasterDataGet(MPU6050_I2C_BASE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 18,
                    "context": "#define MPU6050_I2C_BASE I2C1_BASE"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "I2C1_BASE",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_039",
            "name": "MPU6050_I2C_ADDR",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 19,
                    "context": "I2CMasterSlaveAddrSet(MPU6050_I2C_BASE, MPU6050_I2C_ADDR, false);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 30,
                    "context": "I2CMasterSlaveAddrSet(MPU6050_I2C_BASE, MPU6050_I2C_ADDR, false);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 35,
                    "context": "I2CMasterSlaveAddrSet(MPU6050_I2C_BASE, MPU6050_I2C_ADDR, true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 19,
                    "context": "#define MPU6050_I2C_ADDR 0x68"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "0x68",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_040",
            "name": "MOTOR1_PWM",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 22,
                    "context": "#define MOTOR1_PWM PWM0_BASE"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM0_BASE",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_041",
            "name": "MOTOR1_OUT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 23,
                    "context": "#define MOTOR1_OUT PWM_OUT_0"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM_OUT_0",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_042",
            "name": "MOTOR2_PWM",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 24,
                    "context": "#define MOTOR2_PWM PWM0_BASE"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM0_BASE",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_043",
            "name": "MOTOR2_OUT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 25,
                    "context": "#define MOTOR2_OUT PWM_OUT_1"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM_OUT_1",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_044",
            "name": "MOTOR3_PWM",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 26,
                    "context": "#define MOTOR3_PWM PWM0_BASE"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM0_BASE",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_045",
            "name": "MOTOR3_OUT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 27,
                    "context": "#define MOTOR3_OUT PWM_OUT_2"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM_OUT_2",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_046",
            "name": "MOTOR4_PWM",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 28,
                    "context": "#define MOTOR4_PWM PWM0_BASE"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM0_BASE",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_047",
            "name": "MOTOR4_OUT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 29,
                    "context": "#define MOTOR4_OUT PWM_OUT_3"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "PWM_OUT_3",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_048",
            "name": "LED_RED",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 32,
                    "context": "#define LED_RED GPIO_PIN_1"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_1",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_049",
            "name": "LED_BLUE",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 59,
                    "context": "GPIOPinWrite(LED_PORT, LED_BLUE, led_state ? LED_BLUE : 0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 33,
                    "context": "#define LED_BLUE GPIO_PIN_2"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_2",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_050",
            "name": "LED_GREEN",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 34,
                    "context": "#define LED_GREEN GPIO_PIN_3"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PIN_3",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_051",
            "name": "LED_PORT",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 59,
                    "context": "GPIOPinWrite(LED_PORT, LED_BLUE, led_state ? LED_BLUE : 0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 35,
                    "context": "#define LED_PORT GPIO_PORTF_BASE"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "GPIO_PORTF_BASE",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        },
        {
            "id": "const_052",
            "name": "STRUCTURES_H",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 1,
                    "context": "#ifndef STRUCTURES_H"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 2,
                    "context": "#define STRUCTURES_H"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "define",
            "value": "#include <stdint.h>",
            "is_define": true,
            "scope": "global",
            "dependencies": []
        }
    ],
    "variables": [
        {
            "id": "var_001",
            "name": "system_ticks",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 16,
                    "context": "static volatile uint32_t system_ticks = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 20,
                    "context": "system_ticks++;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 25,
                    "context": "return system_ticks;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "return",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_002",
            "name": "armed",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 11,
                    "context": "bool armed;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 84,
                    "context": "motors.armed = false;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 88,
                    "context": "if(!motors.armed) return;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 97,
                    "context": "motors.armed = true;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 103,
                    "context": "motors.armed = false;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 110,
                    "context": "return motors.armed;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 114,
                    "context": "motors.armed = false;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "bool",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_003",
            "name": "pwm_period",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 14,
                    "context": "static uint32_t pwm_period;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 20,
                    "context": "return (pulse - MOTOR_MIN_PULSE) * pwm_period / (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 63,
                    "context": "pwm_period = (pwm_clock / MOTOR_PWM_FREQ) - 1;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 68,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, pwm_period);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 69,
                    "context": "PWMGenPeriodSet(PWM0_BASE, PWM_GEN_1, pwm_period);"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint32_t",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_004",
            "name": "dt",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 30,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_0, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 33,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 36,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_2, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_3, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 86,
                    "context": "float dt = (now - last_update) / 1000.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "sensor_data.roll = COMP_FILTER_ALPHA * (sensor_data.roll + sensor_data.gyro_x * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 91,
                    "context": "sensor_data.pitch = COMP_FILTER_ALPHA * (sensor_data.pitch + sensor_data.gyro_y * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 93,
                    "context": "sensor_data.yaw += sensor_data.gyro_z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 43,
                    "context": "float dt = (current_time - last_update) / 1000.0f; // Перевод в секунды"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 65,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 72,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 86,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "gyro_z *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_005",
            "name": "roll_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 16,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 46,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_006",
            "name": "pitch_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 24,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_007",
            "name": "yaw_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 32,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_008",
            "name": "altitude_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "static",
            "is_static": true,
            "valid_range": {}
        },
        {
            "id": "var_009",
            "name": "error",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "float error = pid->setpoint - current_value;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 69,
                    "context": "float p_term = pid->kp * error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 72,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 86,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 87,
                    "context": "pid->prev_error = error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 69,
                    "context": "float prev_error;     // Предыдущая ошибка"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 92,
                    "context": "uint8_t errors;           // Битовое поле ошибок"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "kp *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_010",
            "name": "dt",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 30,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_0, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 33,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 36,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_2, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 39,
                    "context": "PWMPulseWidthSet(PWM0_BASE, PWM_OUT_3, pwm_value);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 86,
                    "context": "float dt = (now - last_update) / 1000.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "sensor_data.roll = COMP_FILTER_ALPHA * (sensor_data.roll + sensor_data.gyro_x * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 91,
                    "context": "sensor_data.pitch = COMP_FILTER_ALPHA * (sensor_data.pitch + sensor_data.gyro_y * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 93,
                    "context": "sensor_data.yaw += sensor_data.gyro_z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 43,
                    "context": "float dt = (current_time - last_update) / 1000.0f; // Перевод в секунды"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 65,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 72,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 86,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "error *",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_011",
            "name": "x",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 76,
                    "context": "I2CMasterInitExpClk(I2C1_BASE, SysCtlClockGet(), true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 8,
                    "context": "#define MPU6050_PWR_MGMT_1    0x6B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 9,
                    "context": "#define MPU6050_SMPLRT_DIV    0x19"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 10,
                    "context": "#define MPU6050_CONFIG        0x1A"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 11,
                    "context": "#define MPU6050_GYRO_CONFIG   0x1B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 12,
                    "context": "#define MPU6050_ACCEL_CONFIG  0x1C"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 13,
                    "context": "#define MPU6050_ACCEL_XOUT_H  0x3B"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 45,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 49,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x00);    // Выход из спящего режима"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 50,
                    "context": "I2C_WriteByte(MPU6050_SMPLRT_DIV, 0x07);    // Частота сэмплирования = 1kHz"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "I2C_WriteByte(MPU6050_CONFIG, 0x06);        // Фильтр низких частот"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "I2C_WriteByte(MPU6050_GYRO_CONFIG, 0x08);   // Диапазон гироскопа ±500°/s"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 53,
                    "context": "I2C_WriteByte(MPU6050_ACCEL_CONFIG, 0x00);  // Диапазон акселерометра ±2g"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 72,
                    "context": "sensor_data.accel_x = (float)raw_data[0] / MPU6050_ACCEL_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 75,
                    "context": "sensor_data.gyro_x = (float)raw_data[4] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 81,
                    "context": "float accel_pitch = atan2f(-sensor_data.accel_x, sqrtf(sensor_data.accel_y * sensor_data.accel_y +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "sensor_data.roll = COMP_FILTER_ALPHA * (sensor_data.roll + sensor_data.gyro_x * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 76,
                    "context": "const float max_i = 100.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 77,
                    "context": "if (i_term > max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 78,
                    "context": "i_term = max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 79,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 80,
                    "context": "} else if (i_term < -max_i) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 81,
                    "context": "i_term = -max_i;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 82,
                    "context": "pid->integral = -max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 93,
                    "context": "const float max_output = 500.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "pid->output = max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "pid->output = -max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 19,
                    "context": "#define MPU6050_I2C_ADDR 0x68"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 25,
                    "context": "float x;            // Ускорение по оси X (g)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 32,
                    "context": "float x;            // Угловая скорость по оси X (град/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 39,
                    "context": "float x;            // Магнитное поле по оси X (мГаусс)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 103,
                    "context": "uint8_t aux_flags;    // Дополнительные флаги управления"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 113,
                    "context": "float max_angle;           // Максимальный угол наклона"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 114,
                    "context": "float max_altitude;        // Максимальная высота"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_012",
            "name": "y",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 4,
                    "context": "#include \"inc/hw_types.h\""
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 7,
                    "context": "#include \"driverlib/sysctl.h\""
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 16,
                    "context": "static volatile uint32_t system_ticks = 0;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 19,
                    "context": "void SysTick_Handler(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 20,
                    "context": "system_ticks++;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 25,
                    "context": "return system_ticks;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 29,
                    "context": "void DelayMs(uint32_t ms) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 30,
                    "context": "SysCtlDelay(SysCtlClockGet() / 3000 * ms);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 34,
                    "context": "void SystemClock_Config(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 36,
                    "context": "SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 39,
                    "context": "SysTickPeriodSet(SysCtlClockGet() / 1000);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 40,
                    "context": "SysTickIntEnable();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 41,
                    "context": "SysTickEnable();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 48,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 49,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 50,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 51,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 52,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 55,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 56,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 57,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOC) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 58,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOD) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 59,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOE) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 60,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 66,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 67,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 72,
                    "context": "GPIOPinTypeI2C(GPIO_PORTA_BASE, GPIO_PIN_7);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 73,
                    "context": "GPIOPinTypeI2CSCL(GPIO_PORTA_BASE, GPIO_PIN_6);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 76,
                    "context": "I2CMasterInitExpClk(I2C1_BASE, SysCtlClockGet(), true);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 82,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 90,
                    "context": "GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_4 | GPIO_PIN_5);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\hardware.c",
                    "line_number": 97,
                    "context": "uint32_t pwmClock = SysCtlClockGet() / 64;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 5,
                    "context": "#include \"driverlib/sysctl.h\""
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 63,
                    "context": "static void check_safety_conditions(const SensorData* sensors) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 67,
                    "context": "Motors_EmergencyStop();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 70,
                    "context": "if(sensors->battery_voltage < LOW_VOLTAGE_THRESHOLD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 72,
                    "context": "Motors_EmergencyStop();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 78,
                    "context": "SystemClock_Config();"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 111,
                    "context": "check_safety_conditions(sensor_data);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 46,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 47,
                    "context": "SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 50,
                    "context": "while(!SysCtlPeripheralReady(SYSCTL_PERIPH_PWM0) ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 51,
                    "context": "!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 59,
                    "context": "GPIOPinTypePWM(GPIO_PORTB_BASE, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_4 | GPIO_PIN_5);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 62,
                    "context": "uint32_t pwm_clock = SysCtlClockGet() / 64;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 113,
                    "context": "void Motors_EmergencyStop(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 18,
                    "context": "static void I2C_WriteByte(uint8_t reg, uint8_t data) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 22,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 26,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 29,
                    "context": "static uint8_t I2C_ReadByte(uint8_t reg) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 33,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 37,
                    "context": "while(I2CMasterBusy(MPU6050_I2C_BASE));"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 45,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x80);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 46,
                    "context": "DelayMs(100);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 49,
                    "context": "I2C_WriteByte(MPU6050_PWR_MGMT_1, 0x00);    // Выход из спящего режима"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 50,
                    "context": "I2C_WriteByte(MPU6050_SMPLRT_DIV, 0x07);    // Частота сэмплирования = 1kHz"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 51,
                    "context": "I2C_WriteByte(MPU6050_CONFIG, 0x06);        // Фильтр низких частот"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 52,
                    "context": "I2C_WriteByte(MPU6050_GYRO_CONFIG, 0x08);   // Диапазон гироскопа ±500°/s"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 53,
                    "context": "I2C_WriteByte(MPU6050_ACCEL_CONFIG, 0x00);  // Диапазон акселерометра ±2g"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 63,
                    "context": "buffer[i] = I2C_ReadByte(MPU6050_ACCEL_XOUT_H + i);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 73,
                    "context": "sensor_data.accel_y = (float)raw_data[1] / MPU6050_ACCEL_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 75,
                    "context": "sensor_data.gyro_x = (float)raw_data[4] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 76,
                    "context": "sensor_data.gyro_y = (float)raw_data[5] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 77,
                    "context": "sensor_data.gyro_z = (float)raw_data[6] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 80,
                    "context": "float accel_roll = atan2f(sensor_data.accel_y, sensor_data.accel_z) * 57.3f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 81,
                    "context": "float accel_pitch = atan2f(-sensor_data.accel_x, sqrtf(sensor_data.accel_y * sensor_data.accel_y +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "sensor_data.roll = COMP_FILTER_ALPHA * (sensor_data.roll + sensor_data.gyro_x * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 91,
                    "context": "sensor_data.pitch = COMP_FILTER_ALPHA * (sensor_data.pitch + sensor_data.gyro_y * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 93,
                    "context": "sensor_data.yaw += sensor_data.gyro_z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 100,
                    "context": "sensor_data.battery_voltage = 12.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 32,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 107,
                    "context": "+ roll - pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 109,
                    "context": "- roll - pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "+ roll + pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "- roll + pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 8,
                    "context": "void SystemClock_Config(void);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\hardware.h",
                    "line_number": 15,
                    "context": "void DelayMs(uint32_t ms);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 10,
                    "context": "typedef enum {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 23,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 26,
                    "context": "float y;            // Ускорение по оси Y (g)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 33,
                    "context": "float y;            // Угловая скорость по оси Y (град/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 36,
                    "context": "} gyroscope;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 40,
                    "context": "float y;            // Магнитное поле по оси Y (мГаусс)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 47,
                    "context": "float battery_voltage;      // Напряжение батареи (вольты)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 53,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 56,
                    "context": "float yaw;            // Рыскание (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 63,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 76,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 86,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 93,
                    "context": "} Telemetry;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 98,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 102,
                    "context": "float yaw;            // Заданное рыскание (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 109,
                    "context": "typedef struct {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_013",
            "name": "z",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 74,
                    "context": "sensor_data.accel_z = (float)raw_data[2] / MPU6050_ACCEL_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 77,
                    "context": "sensor_data.gyro_z = (float)raw_data[6] / MPU6050_GYRO_SCALE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 80,
                    "context": "float accel_roll = atan2f(sensor_data.accel_y, sensor_data.accel_z) * 57.3f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 82,
                    "context": "sensor_data.accel_z * sensor_data.accel_z)) * 57.3f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 93,
                    "context": "sensor_data.yaw += sensor_data.gyro_z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 14,
                    "context": "void InitializeStabilization(void) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 40,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 27,
                    "context": "float z;            // Ускорение по оси Z (g)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 34,
                    "context": "float z;            // Угловая скорость по оси Z (град/с)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 41,
                    "context": "float z;            // Магнитное поле по оси Z (мГаусс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_014",
            "name": "timestamp",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 28,
                    "context": "uint32_t timestamp; // Временная метка измерения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 35,
                    "context": "uint32_t timestamp; // Временная метка измерения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 42,
                    "context": "uint32_t timestamp; // Временная метка измерения"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint32_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_023",
            "name": "barometer_altitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 103,
                    "context": "sensor_data.barometer_altitude = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 45,
                    "context": "float barometer_altitude;    // Высота по барометру (метры)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_024",
            "name": "temperature",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 97,
                    "context": "sensor_data.temperature = (float)temp_raw / 340.0f + 36.53f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 46,
                    "context": "float temperature;          // Температура (градусы Цельсия)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_025",
            "name": "battery_voltage",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 70,
                    "context": "if(sensors->battery_voltage < LOW_VOLTAGE_THRESHOLD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 100,
                    "context": "sensor_data.battery_voltage = 12.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 47,
                    "context": "float battery_voltage;      // Напряжение батареи (вольты)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_026",
            "name": "roll",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "if(fabsf(sensors->roll) > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 80,
                    "context": "float accel_roll = atan2f(sensor_data.accel_y, sensor_data.accel_z) * 57.3f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 89,
                    "context": "sensor_data.roll = COMP_FILTER_ALPHA * (sensor_data.roll + sensor_data.gyro_x * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 90,
                    "context": "(1.0f - COMP_FILTER_ALPHA) * accel_roll;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 16,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 46,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 65,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 107,
                    "context": "+ roll - pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 109,
                    "context": "- roll - pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "+ roll + pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "- roll + pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 54,
                    "context": "float roll;            // Крен (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 71,
                    "context": "} PIDController;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 100,
                    "context": "float roll;           // Заданный крен (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_027",
            "name": "pitch",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "fabsf(sensors->pitch) > MAX_SAFE_ANGLE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 81,
                    "context": "float accel_pitch = atan2f(-sensor_data.accel_x, sqrtf(sensor_data.accel_y * sensor_data.accel_y +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 91,
                    "context": "sensor_data.pitch = COMP_FILTER_ALPHA * (sensor_data.pitch + sensor_data.gyro_y * dt) +"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 92,
                    "context": "(1.0f - COMP_FILTER_ALPHA) * accel_pitch;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 24,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 107,
                    "context": "+ roll - pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 109,
                    "context": "- roll - pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "+ roll + pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "- roll + pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 55,
                    "context": "float pitch;           // Тангаж (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 101,
                    "context": "float pitch;          // Заданный тангаж (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_028",
            "name": "yaw",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 93,
                    "context": "sensor_data.yaw += sensor_data.gyro_z * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 32,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 107,
                    "context": "+ roll - pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 109,
                    "context": "- roll - pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 111,
                    "context": "+ roll + pitch - yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 113,
                    "context": "- roll + pitch + yaw);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 56,
                    "context": "float yaw;            // Рыскание (градусы)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 102,
                    "context": "float yaw;            // Заданное рыскание (-1.0 - 1.0)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_029",
            "name": "altitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\sensors.c",
                    "line_number": 103,
                    "context": "sensor_data.barometer_altitude = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 45,
                    "context": "float barometer_altitude;    // Высота по барометру (метры)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 57,
                    "context": "float altitude;       // Высота (метры)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 114,
                    "context": "float max_altitude;        // Максимальная высота"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_030",
            "name": "kp",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 16,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 24,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 32,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 69,
                    "context": "float p_term = pid->kp * error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 64,
                    "context": "float kp;             // Пропорциональный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_031",
            "name": "ki",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 73,
                    "context": "float i_term = pid->ki * pid->integral;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 79,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 82,
                    "context": "pid->integral = -max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 65,
                    "context": "float ki;             // Интегральный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_032",
            "name": "kd",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 86,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 66,
                    "context": "float kd;             // Дифференциальный коэффициент"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_033",
            "name": "setpoint",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 46,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 66,
                    "context": "float error = pid->setpoint - current_value;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 67,
                    "context": "float setpoint;       // Целевое значение"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_034",
            "name": "integral",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 72,
                    "context": "pid->integral += error * dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 73,
                    "context": "float i_term = pid->ki * pid->integral;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 79,
                    "context": "pid->integral = max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 82,
                    "context": "pid->integral = -max_i / pid->ki;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 68,
                    "context": "float integral;       // Интегральная составляющая"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_035",
            "name": "prev_error",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 86,
                    "context": "float d_term = pid->kd * (error - pid->prev_error) / dt;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 87,
                    "context": "pid->prev_error = error;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 69,
                    "context": "float prev_error;     // Предыдущая ошибка"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_036",
            "name": "output",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 40,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 90,
                    "context": "pid->output = p_term + i_term + d_term;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 93,
                    "context": "const float max_output = 500.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 94,
                    "context": "if (pid->output > max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 95,
                    "context": "pid->output = max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 96,
                    "context": "} else if (pid->output < -max_output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 97,
                    "context": "pid->output = -max_output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 100,
                    "context": "return pid->output;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 106,
                    "context": "output->front_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "output->front_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 110,
                    "context": "output->rear_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->rear_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 116,
                    "context": "output->front_left = output->front_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 117,
                    "context": "output->front_right = output->front_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 118,
                    "context": "output->rear_left = output->rear_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 119,
                    "context": "output->rear_right = output->rear_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 70,
                    "context": "float output;         // Выход регулятора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_037",
            "name": "front_left",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 106,
                    "context": "output->front_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 116,
                    "context": "output->front_left = output->front_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 77,
                    "context": "uint16_t front_left;   // Значение ШИМ для переднего левого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_038",
            "name": "front_right",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "output->front_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 117,
                    "context": "output->front_right = output->front_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->front_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 78,
                    "context": "uint16_t front_right;  // Значение ШИМ для переднего правого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_039",
            "name": "rear_left",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 110,
                    "context": "output->rear_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 118,
                    "context": "output->rear_left = output->rear_left > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_left;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 79,
                    "context": "uint16_t rear_left;    // Значение ШИМ для заднего левого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_040",
            "name": "rear_right",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->rear_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 119,
                    "context": "output->rear_right = output->rear_right > MOTOR_MAX_PULSE ? MOTOR_MAX_PULSE : output->rear_right;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 80,
                    "context": "uint16_t rear_right;   // Значение ШИМ для заднего правого мотора"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_041",
            "name": "state",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 15,
                    "context": "switch(current_state) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 19,
                    "context": "led_state = !led_state;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 27,
                    "context": "led_state = !led_state;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 35,
                    "context": "led_state = !led_state;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 42,
                    "context": "led_state = true;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 48,
                    "context": "led_state = !led_state;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 54,
                    "context": "led_state = false;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 59,
                    "context": "GPIOPinWrite(LED_PORT, LED_BLUE, led_state ? LED_BLUE : 0);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 66,
                    "context": "current_state = DRONE_STATE_EMERGENCY;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 71,
                    "context": "current_state = DRONE_STATE_EMERGENCY;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 90,
                    "context": "current_state = DRONE_STATE_IDLE;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 96,
                    "context": "static bool led_state = false;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 116,
                    "context": "current_state == DRONE_STATE_FLYING) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 87,
                    "context": "DroneState state;          // Текущее состояние дрона"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "DroneState",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_042",
            "name": "attitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 88,
                    "context": "Attitude attitude;         // Текущая ориентация"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "Attitude",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_043",
            "name": "sensors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 63,
                    "context": "static void check_safety_conditions(const SensorData* sensors) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 64,
                    "context": "if(fabsf(sensors->roll) > MAX_SAFE_ANGLE ||"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 65,
                    "context": "fabsf(sensors->pitch) > MAX_SAFE_ANGLE) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\main.c",
                    "line_number": 70,
                    "context": "if(sensors->battery_voltage < LOW_VOLTAGE_THRESHOLD) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 40,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 89,
                    "context": "SensorData sensors;        // Данные с датчиков"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "SensorData",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_044",
            "name": "motors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 12,
                    "context": "} motors = {0};"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 26,
                    "context": "motors.values[motor] = pwm_value;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 84,
                    "context": "motors.armed = false;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 88,
                    "context": "if(!motors.armed) return;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 97,
                    "context": "motors.armed = true;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 103,
                    "context": "motors.armed = false;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 110,
                    "context": "return motors.armed;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\motors.c",
                    "line_number": 114,
                    "context": "motors.armed = false;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 90,
                    "context": "MotorControl motors;       // Значения моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "MotorControl",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_045",
            "name": "flight_time",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 91,
                    "context": "uint32_t flight_time;      // Время полета (мс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint32_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_046",
            "name": "errors",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 92,
                    "context": "uint8_t errors;           // Битовое поле ошибок"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint8_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_047",
            "name": "throttle",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 56,
                    "context": "float base_throttle = 0.5f; // 50% мощности"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 59,
                    "context": "mix_outputs(base_throttle, roll_correction, pitch_correction, yaw_correction, output);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 106,
                    "context": "output->front_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 108,
                    "context": "output->front_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 110,
                    "context": "output->rear_left = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 112,
                    "context": "output->rear_right = (uint16_t)(MOTOR_MIN_PULSE + throttle * (MOTOR_MAX_PULSE - MOTOR_MIN_PULSE)"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 99,
                    "context": "float throttle;        // Газ (0.0 - 1.0)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_051",
            "name": "aux_flags",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 103,
                    "context": "uint8_t aux_flags;    // Дополнительные флаги управления"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint8_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_052",
            "name": "roll_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 16,
                    "context": "roll_pid.kp = ROLL_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 17,
                    "context": "roll_pid.ki = ROLL_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 18,
                    "context": "roll_pid.kd = ROLL_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 19,
                    "context": "roll_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 20,
                    "context": "roll_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 21,
                    "context": "roll_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 46,
                    "context": "roll_pid.setpoint = 0.0f;  // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 51,
                    "context": "float roll_correction = update_pid(&roll_pid, sensors->gyroscope.x, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_053",
            "name": "pitch_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 24,
                    "context": "pitch_pid.kp = PITCH_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 25,
                    "context": "pitch_pid.ki = PITCH_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 26,
                    "context": "pitch_pid.kd = PITCH_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 27,
                    "context": "pitch_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 28,
                    "context": "pitch_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 29,
                    "context": "pitch_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 47,
                    "context": "pitch_pid.setpoint = 0.0f; // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 52,
                    "context": "float pitch_correction = update_pid(&pitch_pid, sensors->gyroscope.y, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_054",
            "name": "yaw_pid",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 32,
                    "context": "yaw_pid.kp = YAW_KP;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 33,
                    "context": "yaw_pid.ki = YAW_KI;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 34,
                    "context": "yaw_pid.kd = YAW_KD;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 35,
                    "context": "yaw_pid.integral = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 36,
                    "context": "yaw_pid.prev_error = 0.0f;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 37,
                    "context": "yaw_pid.setpoint = 0.0f; // Целевой угол - 0 для удержания положения"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 48,
                    "context": "yaw_pid.setpoint = 0.0f;   // Для удержания позиции всегда 0"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 53,
                    "context": "float yaw_correction = update_pid(&yaw_pid, sensors->gyroscope.z, dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "PIDController",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_055",
            "name": "max_angle",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 113,
                    "context": "float max_angle;           // Максимальный угол наклона"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_056",
            "name": "max_altitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 114,
                    "context": "float max_altitude;        // Максимальная высота"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "float",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        },
        {
            "id": "var_057",
            "name": "failsafe_timeout",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 115,
                    "context": "uint16_t failsafe_timeout; // Таймаут потери связи (мс)"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "type": "uint16_t",
            "scope": "global",
            "is_static": false,
            "valid_range": {}
        }
    ],
    "structures": [
        {
            "id": "struct_001",
            "name": "accelerometer",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 29,
                    "context": "} accelerometer;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_002",
            "name": "Attitude",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 58,
                    "context": "} Attitude;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 88,
                    "context": "Attitude attitude;         // Текущая ориентация"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_003",
            "name": "PIDController",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 6,
                    "context": "static PIDController roll_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 7,
                    "context": "static PIDController pitch_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 8,
                    "context": "static PIDController yaw_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 9,
                    "context": "static PIDController altitude_pid;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 12,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt);"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 65,
                    "context": "static float update_pid(PIDController* pid, float current_value, float dt) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 71,
                    "context": "} PIDController;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 110,
                    "context": "PIDController roll_pid;    // PID для крена"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 111,
                    "context": "PIDController pitch_pid;   // PID для тангажа"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 112,
                    "context": "PIDController yaw_pid;     // PID для рыскания"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_004",
            "name": "MotorControl",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 40,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 104,
                    "context": "void mix_outputs(float throttle, float roll, float pitch, float yaw, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 81,
                    "context": "} MotorControl;"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 90,
                    "context": "MotorControl motors;       // Значения моторов"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_005",
            "name": "Telemetry",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 93,
                    "context": "} Telemetry;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_006",
            "name": "ControlCommand",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\core\\stabilization.c",
                    "line_number": 40,
                    "context": "void UpdateStabilization(const ControlCommand* cmd, const SensorData* sensors, MotorControl* output) {"
                },
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 104,
                    "context": "} ControlCommand;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        },
        {
            "id": "struct_007",
            "name": "DroneConfig",
            "description": "",
            "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
            "links_in_code": [
                {
                    "file_path": "d:\\keil\\prog\\src2\\include\\structures.h",
                    "line_number": 116,
                    "context": "} DroneConfig;"
                }
            ],
            "comments": "",
            "warnings": "",
            "deprecated": false,
            "tags": [],
            "documentation_link": "",
            "is_deleted": false,
            "fields": [],
            "size": 0,
            "alignment": 0,
            "used_in_functions": [],
            "inheritance": "",
            "packed": false
        }
    ]
}